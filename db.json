{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/hexo-theme-yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"source/photo/alipay.JPG","path":"photo/alipay.JPG","modified":0,"renderable":0},{"_id":"source/photo/weixin.JPG","path":"photo/weixin.JPG","modified":0,"renderable":0},{"_id":"themes/hexo-theme-yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"source/photo/weiixin.JPG","path":"photo/weiixin.JPG","modified":0,"renderable":0},{"_id":"source/photo/photo.JPG","path":"photo/photo.JPG","modified":0,"renderable":0},{"_id":"source/video/douyin-1.MP4","path":"video/douyin-1.MP4","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"6a57a0d6ba5a523dcf2dc45298bc1b4411fb2d1c","modified":1586231041500},{"_id":"source/CNAME","hash":"38919b4bf7a0262bdfe6544b0a8895862dec34cf","modified":1586076018424},{"_id":"themes/hexo-theme-yilia/.DS_Store","hash":"d670e98e1fe63caa5463e27cc594fb76169b9e67","modified":1586082999531},{"_id":"themes/hexo-theme-yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1586072634658},{"_id":"themes/hexo-theme-yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1586072634658},{"_id":"themes/hexo-theme-yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1586072634658},{"_id":"themes/hexo-theme-yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1586072634658},{"_id":"themes/hexo-theme-yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1586072634659},{"_id":"themes/hexo-theme-yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1586072634659},{"_id":"themes/hexo-theme-yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1586072634659},{"_id":"themes/hexo-theme-yilia/_config.yml","hash":"057fec74432a012c43845dc6880e0cf0f1f306ee","modified":1586225915772},{"_id":"themes/hexo-theme-yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1586072634667},{"_id":"themes/hexo-theme-yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1586072634688},{"_id":"source/_posts/Generalization Knapsack.md","hash":"48e13a1071cbf89d2acdbe70ab780a5adcca77c3","modified":1586139214744},{"_id":"source/_posts/Git-hooks.md","hash":"d80b144cf827284127cad0dadf9ea561871ec3a5","modified":1586165495803},{"_id":"source/_posts/conference record-2019-7-31.md","hash":"20a0baec7ebbdd8cf2761f0f65fe28c54096a787","modified":1586096033882},{"_id":"source/_posts/depoly hexo to vps.md","hash":"b7f4c805b1b75a4adb4bf4fa7eedc8e04d5e2dd8","modified":1586162261757},{"_id":"source/_posts/.DS_Store","hash":"96bd08e869529d9f9a06ca3a60fa84c00ca5ba80","modified":1586227007029},{"_id":"source/_posts/java-dynamic proxy.md","hash":"2fb120c1009a5df1a647e40d7521d4e59f4f4fcc","modified":1586222518975},{"_id":"source/_posts/k8s introduction.md","hash":"0e2e71cabce515769b3f14536b8df415ac668671","modified":1586137518424},{"_id":"source/_posts/elk.md","hash":"01c15dc53cc18b8436ac5eb9d99ba7ee8ef05832","modified":1586222493442},{"_id":"source/_posts/java_clone.md","hash":"bcbc1ec7a7b198d8402a38530765254e348e2474","modified":1586221697906},{"_id":"source/_posts/game.md","hash":"0350101a03930f4feed5e89bfc28a58d473471d0","modified":1586176152455},{"_id":"source/photo/.DS_Store","hash":"caa7b6115df170977dec1086106a2e3ab4888bcc","modified":1586097952016},{"_id":"themes/hexo-theme-yilia/layout/.DS_Store","hash":"2d73327afb839d772442aa1df794adb0b2ff8416","modified":1586080119599},{"_id":"themes/hexo-theme-yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1586072634666},{"_id":"themes/hexo-theme-yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1586072634666},{"_id":"themes/hexo-theme-yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1586072634666},{"_id":"themes/hexo-theme-yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1586072634666},{"_id":"themes/hexo-theme-yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1586072634667},{"_id":"themes/hexo-theme-yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1586072634667},{"_id":"themes/hexo-theme-yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1586072634667},{"_id":"themes/hexo-theme-yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1586072634659},{"_id":"themes/hexo-theme-yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1586072634660},{"_id":"themes/hexo-theme-yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1586072634660},{"_id":"themes/hexo-theme-yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1586072634660},{"_id":"themes/hexo-theme-yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1586072634660},{"_id":"themes/hexo-theme-yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1586072634660},{"_id":"themes/hexo-theme-yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1586072634660},{"_id":"themes/hexo-theme-yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1586072634685},{"_id":"themes/hexo-theme-yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1586072634688},{"_id":"themes/hexo-theme-yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1586072634668},{"_id":"themes/hexo-theme-yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1586072634682},{"_id":"source/photo/alipay.JPG","hash":"b8317442d6d1c346b0d77d6d20f48e7bfa0b6efd","modified":1586074877487},{"_id":"source/photo/weixin.JPG","hash":"876bdc499f72c925312230c3d86ac9af0a1f9ddd","modified":1586168994427},{"_id":"themes/hexo-theme-yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586072634665},{"_id":"themes/hexo-theme-yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1586072634686},{"_id":"themes/hexo-theme-yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1586072634687},{"_id":"themes/hexo-theme-yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1586072634660},{"_id":"themes/hexo-theme-yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1586072634661},{"_id":"themes/hexo-theme-yilia/layout/_partial/archive.ejs","hash":"620577e2236a7d96b8e4cb3b6d23c9c34b2a430b","modified":1586225448979},{"_id":"themes/hexo-theme-yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1586072634661},{"_id":"themes/hexo-theme-yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1586072634661},{"_id":"themes/hexo-theme-yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1586072634661},{"_id":"themes/hexo-theme-yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1586072634662},{"_id":"themes/hexo-theme-yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1586072634662},{"_id":"themes/hexo-theme-yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1586072634662},{"_id":"themes/hexo-theme-yilia/layout/_partial/footer.ejs","hash":"0af58cf6a543b94019baecb5faed89f2ce09da54","modified":1586226723962},{"_id":"themes/hexo-theme-yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1586072634662},{"_id":"themes/hexo-theme-yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1586072634661},{"_id":"themes/hexo-theme-yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1586072634663},{"_id":"themes/hexo-theme-yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1586072634663},{"_id":"themes/hexo-theme-yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1586072634665},{"_id":"themes/hexo-theme-yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1586072634666},{"_id":"themes/hexo-theme-yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1586072634682},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1586072634683},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1586072634683},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1586072634683},{"_id":"themes/hexo-theme-yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1586072634684},{"_id":"themes/hexo-theme-yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1586072634684},{"_id":"themes/hexo-theme-yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1586072634684},{"_id":"themes/hexo-theme-yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1586072634685},{"_id":"themes/hexo-theme-yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1586072634685},{"_id":"themes/hexo-theme-yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1586072634668},{"_id":"themes/hexo-theme-yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1586072634668},{"_id":"themes/hexo-theme-yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1586072634668},{"_id":"themes/hexo-theme-yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1586072634669},{"_id":"themes/hexo-theme-yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1586072634669},{"_id":"themes/hexo-theme-yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1586072634670},{"_id":"themes/hexo-theme-yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1586072634669},{"_id":"themes/hexo-theme-yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1586072634669},{"_id":"themes/hexo-theme-yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1586072634670},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1586072634672},{"_id":"themes/hexo-theme-yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1586072634673},{"_id":"themes/hexo-theme-yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1586072634674},{"_id":"themes/hexo-theme-yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1586072634674},{"_id":"themes/hexo-theme-yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1586072634674},{"_id":"themes/hexo-theme-yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1586072634675},{"_id":"themes/hexo-theme-yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1586072634675},{"_id":"themes/hexo-theme-yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1586072634676},{"_id":"themes/hexo-theme-yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1586072634676},{"_id":"themes/hexo-theme-yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1586072634675},{"_id":"themes/hexo-theme-yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1586072634676},{"_id":"themes/hexo-theme-yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1586072634676},{"_id":"themes/hexo-theme-yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1586072634677},{"_id":"themes/hexo-theme-yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1586072634677},{"_id":"themes/hexo-theme-yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1586072634677},{"_id":"themes/hexo-theme-yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1586072634678},{"_id":"themes/hexo-theme-yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1586072634677},{"_id":"themes/hexo-theme-yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1586072634678},{"_id":"themes/hexo-theme-yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1586072634679},{"_id":"themes/hexo-theme-yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1586072634679},{"_id":"themes/hexo-theme-yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1586072634679},{"_id":"themes/hexo-theme-yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1586072634680},{"_id":"themes/hexo-theme-yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1586072634680},{"_id":"themes/hexo-theme-yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1586072634680},{"_id":"themes/hexo-theme-yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1586072634680},{"_id":"themes/hexo-theme-yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1586072634681},{"_id":"themes/hexo-theme-yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1586072634681},{"_id":"themes/hexo-theme-yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1586072634681},{"_id":"themes/hexo-theme-yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1586072634681},{"_id":"themes/hexo-theme-yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1586072634682},{"_id":"source/photo/weiixin.JPG","hash":"cd764ae9e82adb5f2ee03f90b0e31eace67a87d0","modified":1586074901868},{"_id":"themes/hexo-theme-yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1586072634665},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1586072634663},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1586072634663},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/date.ejs","hash":"09f534c3cc47316e171ce12504f457dd3a2ded40","modified":1586220961383},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1586072634663},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1586072634664},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1586072634664},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1586072634664},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1586072634664},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1586072634664},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1586072634664},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1586072634670},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1586072634671},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1586072634671},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1586072634670},{"_id":"themes/hexo-theme-yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1586072634672},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1586072634672},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1586072634673},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1586072634673},{"_id":"themes/hexo-theme-yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1586072634674},{"_id":"themes/hexo-theme-yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1586072634674},{"_id":"themes/hexo-theme-yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1586072634675},{"_id":"themes/hexo-theme-yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1586072634673},{"_id":"source/photo/photo.JPG","hash":"1bac47560ced9805197987056cf9ccca771a3d3c","modified":1586074145936},{"_id":"public/content.json","hash":"fe68225707b2d77bbf180aa14b35f9c3964b9c14","modified":1586231906177},{"_id":"public/2020/04/06/game/index.html","hash":"a1e38e13aca0a28b76d4bcd4a3b3770cd9ce3586","modified":1586231906177},{"_id":"public/2020/04/06/Git-hooks/index.html","hash":"b1d768698c8748acc22d4409d0825656875d743d","modified":1586231906177},{"_id":"public/2020/04/06/depoly hexo to vps/index.html","hash":"a158860299ed6aac6b8fa214ad8414fd18433d25","modified":1586231906177},{"_id":"public/2020/04/05/k8s introduction/index.html","hash":"5074647d7f8ba9aabb014aa534bb8e3570c9034e","modified":1586231906177},{"_id":"public/2020/04/05/elk/index.html","hash":"8cf5e7b614189ac8fd74ad81f843f4c5f777a823","modified":1586231906177},{"_id":"public/2020/04/01/Generalization Knapsack/index.html","hash":"2a0d8ae86cac9ad3b3bafc21eacd230c1fe29874","modified":1586231906177},{"_id":"public/2020/04/01/java-dynamic proxy/index.html","hash":"45f0bc932d1f0896f8d88e4d61fa6c9d5433d0e4","modified":1586231906177},{"_id":"public/2019/07/31/conference record-2019-7-31/index.html","hash":"e056c11daf98a42e46e90a2acff2313469b1f23c","modified":1586231906177},{"_id":"public/2019/04/17/java_clone/index.html","hash":"92fedfb230b3f90a1aa408d22085add248a47f52","modified":1586231906177},{"_id":"public/archives/index.html","hash":"3d16af596143afad8619e92ab91657bb8589364d","modified":1586231906177},{"_id":"public/archives/2019/index.html","hash":"69e37e93c22d1e20b9757e5e0533c49371d6bdc6","modified":1586231906177},{"_id":"public/archives/2019/04/index.html","hash":"39ed4422766de220842dedbba9ae63bc27a058b1","modified":1586231906177},{"_id":"public/archives/2019/07/index.html","hash":"9308e54b5eda7548bb846d5523b5b3b13bad94b9","modified":1586231906177},{"_id":"public/archives/2020/04/index.html","hash":"c77ab94fb99cad48cef38213378fee85256ccabd","modified":1586231906177},{"_id":"public/archives/2020/index.html","hash":"4674f88677e18e57c122c9ac4249c56421048d05","modified":1586231906177},{"_id":"public/index.html","hash":"c24a80f58aeff6397354f62d5174a8c5ac01b30e","modified":1586231906177},{"_id":"public/tags/算法/index.html","hash":"609585b0084072da1b55f3586e7253994646798d","modified":1586231906177},{"_id":"public/tags/会议/index.html","hash":"0bcd073f939463bb41f65116b6b818780fc96017","modified":1586231906177},{"_id":"public/tags/hexo/index.html","hash":"fc3073177fbebdf0df0604a1422f4710584c8395","modified":1586231906177},{"_id":"public/tags/blog/index.html","hash":"3e8c64379409de29f6164c3b52bfe9e49e5b66ff","modified":1586231906177},{"_id":"public/tags/java/index.html","hash":"b38d53f7088a153bf995126478aefc2bdc89a33c","modified":1586231906177},{"_id":"public/tags/k8s/index.html","hash":"74374952aeca73ce7f5a6458aaf306ec538861d9","modified":1586231906177},{"_id":"public/tags/ELK/index.html","hash":"04ad98d8e4b064dc4637cb7b4e68be684e96df90","modified":1586231906177},{"_id":"public/tags/game/index.html","hash":"ccd60e74fa4aad7ff49c961d46d8d8d7ac772404","modified":1586231906177},{"_id":"public/tags/git/index.html","hash":"7ee2fb323f5e42b04990b365e147067c2ca3b9a5","modified":1586231906177},{"_id":"public/CNAME","hash":"38919b4bf7a0262bdfe6544b0a8895862dec34cf","modified":1586222436544},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1586222436544},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1586222436544},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1586222436544},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1586222436544},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1586222436544},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1586222436544},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1586222436544},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1586222436544},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1586222436544},{"_id":"public/photo/weixin.JPG","hash":"876bdc499f72c925312230c3d86ac9af0a1f9ddd","modified":1586222436544},{"_id":"public/photo/alipay.JPG","hash":"b8317442d6d1c346b0d77d6d20f48e7bfa0b6efd","modified":1586222436544},{"_id":"public/photo/weiixin.JPG","hash":"cd764ae9e82adb5f2ee03f90b0e31eace67a87d0","modified":1586222436544},{"_id":"public/photo/photo.JPG","hash":"1bac47560ced9805197987056cf9ccca771a3d3c","modified":1586222436544},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1586222436544},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1586222436544},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1586222436544},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1586222436544},{"_id":"public/archives/page/2/index.html","hash":"a8f2c11286436602be0c977c27b0b6a9b0bdd3ee","modified":1586231906177},{"_id":"public/archives/2020/page/2/index.html","hash":"3e4aafdef10497c603a2cf7f4e988476b7f997f0","modified":1586231584162},{"_id":"public/archives/2020/04/page/2/index.html","hash":"fe6a9eceab972f7c27c64f7c16665d1d9a18c8f8","modified":1586231584162},{"_id":"public/page/2/index.html","hash":"f53e468ca46396873db8294d448a2e7e23a7341e","modified":1586231906177},{"_id":"source/_posts/video.md","hash":"b7b1fac9b4fc10ec702eac4916beaa7a7cbeae85","modified":1586227655492},{"_id":"source/video/.DS_Store","hash":"588cfbc2fd7ef6d2f4fa606503ced23cd65bf518","modified":1586228745092},{"_id":"source/video/douyin-1.MP4","hash":"47d579fe64691dacfceb088c0e9740e9dd1ee37b","modified":1586228652000},{"_id":"public/2020/04/07/video/index.html","hash":"2d1e9bbe8681a39914747252146e71df0caa9f42","modified":1586231906177},{"_id":"public/tags/video/index.html","hash":"cc0e5822f8cadfdf8bf541debde9eae094db5826","modified":1586231906177},{"_id":"public/assets/css/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1586227523515},{"_id":"public/assets/js/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1586227523515},{"_id":"public/video/douyin-1.MP4","hash":"47d579fe64691dacfceb088c0e9740e9dd1ee37b","modified":1586228754842},{"_id":"source/_posts/music-407.md","hash":"45e05cc4ed9da268b201248ebd9e193dcfd83ff3","modified":1586231864127},{"_id":"public/2020/04/07/music-407/index.html","hash":"5c7ad593e79d17c7ca469be80f1e88089004edfa","modified":1586231872721},{"_id":"public/tags/music/index.html","hash":"db8e135a9f6ccd6765067259dcf6e749dd0254e5","modified":1586231584162},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1586231781624},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1586231781624},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1586231781624}],"Category":[],"Data":[],"Page":[],"Post":[{"layout":"post","title":"Algorithm-Generalization Knapsack","date":"2020-04-01T06:48:00.000Z","comments":1,"_content":"\n<script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default\"></script>\n\n# 泛化背包问题的描述\n\n> 有M个区域，每个区域要投入计算能力不同的云计算服务器，每个区域的收益在投入的某个计算能力之前呈正比例增长，比如其中的一个区域为效益为\n\n$$\n\\chi(j) =\n\\begin{cases}\n3 x, & \\text{x $<$= 200;} \\\\\n2x+200, & \\text{200$<$ x $<$400;}\\\\\nx+600, & \\text{400$<$ x $<$= 600;}\\\\\n1200, & \\text{x$>$600.}\n\\end{cases}\n$$\n<!--more-->\n \n>假设我一共有的计算能力为S的服务器，求我如何分配M个区域的计算能力使得总的收益最大？（给出具体的方案就行）\n","source":"_posts/Generalization Knapsack.md","raw":"---\nlayout: post\ntitle: \"Algorithm-Generalization Knapsack\"\ndate: 2020-04-01 14:48\ncomments: true\ntags: \n\t- 算法\n\t\n---\n\n<script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default\"></script>\n\n# 泛化背包问题的描述\n\n> 有M个区域，每个区域要投入计算能力不同的云计算服务器，每个区域的收益在投入的某个计算能力之前呈正比例增长，比如其中的一个区域为效益为\n\n$$\n\\chi(j) =\n\\begin{cases}\n3 x, & \\text{x $<$= 200;} \\\\\n2x+200, & \\text{200$<$ x $<$400;}\\\\\nx+600, & \\text{400$<$ x $<$= 600;}\\\\\n1200, & \\text{x$>$600.}\n\\end{cases}\n$$\n<!--more-->\n \n>假设我一共有的计算能力为S的服务器，求我如何分配M个区域的计算能力使得总的收益最大？（给出具体的方案就行）\n","slug":"Generalization Knapsack","published":1,"updated":"2020-04-06T02:13:34.744Z","photos":[],"link":"","_id":"ck8p7vtmt0000ahtxar5u4ui5","content":"<script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default\"></script>\n\n<h1 id=\"泛化背包问题的描述\"><a href=\"#泛化背包问题的描述\" class=\"headerlink\" title=\"泛化背包问题的描述\"></a>泛化背包问题的描述</h1><blockquote>\n<p>有M个区域，每个区域要投入计算能力不同的云计算服务器，每个区域的收益在投入的某个计算能力之前呈正比例增长，比如其中的一个区域为效益为</p>\n</blockquote>\n<p>$$<br>\\chi(j) =<br>\\begin{cases}<br>3 x, &amp; \\text{x $&lt;$= 200;} \\<br>2x+200, &amp; \\text{200$&lt;$ x $&lt;$400;}\\<br>x+600, &amp; \\text{400$&lt;$ x $&lt;$= 600;}\\<br>1200, &amp; \\text{x$&gt;$600.}<br>\\end{cases}<br>$$</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>假设我一共有的计算能力为S的服务器，求我如何分配M个区域的计算能力使得总的收益最大？（给出具体的方案就行）</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default\"></script>\n\n<h1 id=\"泛化背包问题的描述\"><a href=\"#泛化背包问题的描述\" class=\"headerlink\" title=\"泛化背包问题的描述\"></a>泛化背包问题的描述</h1><blockquote>\n<p>有M个区域，每个区域要投入计算能力不同的云计算服务器，每个区域的收益在投入的某个计算能力之前呈正比例增长，比如其中的一个区域为效益为</p>\n</blockquote>\n<p>$$<br>\\chi(j) =<br>\\begin{cases}<br>3 x, &amp; \\text{x $&lt;$= 200;} \\<br>2x+200, &amp; \\text{200$&lt;$ x $&lt;$400;}\\<br>x+600, &amp; \\text{400$&lt;$ x $&lt;$= 600;}\\<br>1200, &amp; \\text{x$&gt;$600.}<br>\\end{cases}<br>$$</p>","more":"<blockquote>\n<p>假设我一共有的计算能力为S的服务器，求我如何分配M个区域的计算能力使得总的收益最大？（给出具体的方案就行）</p>\n</blockquote>"},{"layout":"post","title":"会议记录","date":"2019-07-31T06:48:00.000Z","comments":1,"_content":"\n\n\n## 会议记录-2019年7月31日 \n<!--more-->\n| 时间   | 2019年7月31日 10：00                     |\n| ------ | ---------------------------------------- |\n| 地点   | 学院楼403                                |\n| 参与人 | 李鑫、邱建军、李浩、周俊松、金慧、郁华艳 |\n| 汇报人 | 李浩、周俊松、金慧、郁华艳               |\n| 记录人 | 邱建军                                   |\n\n\n\n### 1、金慧-MapReduce的过程及应用\n\n- [x] MapReudce 的过程\n- [x] 三个应用\n  1.   数据去重\n  2.   倒排索引\n  3.   共现矩阵\n\n### 2、郁华艳-GFS、MapReduce、Bigtable\n\n- [x] ​    Google文件系统GFS\n- [x] ​    分布式数据处理MapReduce\n- [x] ​    分布式结构化数据表Bigtable\n\n### 3、李浩-Docker\n\n- [x]    Docker简介\n- [x]    Dcoker的基本架构\n- [x]    Docker应用-WordPress博客的搭建\n\n### 4、周俊松-上周总结\n\n- [x] ​    正向代理、反向代理\n- [x] ​    Samba文件服务器\n- [x] ​    GitLab-Docker方式部署\n- [x] ​    GitLab使用\n\n\n\n","source":"_posts/conference record-2019-7-31.md","raw":"---\nlayout: post\ntitle: \"会议记录\"\ndate: 2019-07-31 14:48\ncomments: true\ntags: \n\t- 会议\n\t\n---\n\n\n\n## 会议记录-2019年7月31日 \n<!--more-->\n| 时间   | 2019年7月31日 10：00                     |\n| ------ | ---------------------------------------- |\n| 地点   | 学院楼403                                |\n| 参与人 | 李鑫、邱建军、李浩、周俊松、金慧、郁华艳 |\n| 汇报人 | 李浩、周俊松、金慧、郁华艳               |\n| 记录人 | 邱建军                                   |\n\n\n\n### 1、金慧-MapReduce的过程及应用\n\n- [x] MapReudce 的过程\n- [x] 三个应用\n  1.   数据去重\n  2.   倒排索引\n  3.   共现矩阵\n\n### 2、郁华艳-GFS、MapReduce、Bigtable\n\n- [x] ​    Google文件系统GFS\n- [x] ​    分布式数据处理MapReduce\n- [x] ​    分布式结构化数据表Bigtable\n\n### 3、李浩-Docker\n\n- [x]    Docker简介\n- [x]    Dcoker的基本架构\n- [x]    Docker应用-WordPress博客的搭建\n\n### 4、周俊松-上周总结\n\n- [x] ​    正向代理、反向代理\n- [x] ​    Samba文件服务器\n- [x] ​    GitLab-Docker方式部署\n- [x] ​    GitLab使用\n\n\n\n","slug":"conference record-2019-7-31","published":1,"updated":"2020-04-05T14:13:53.882Z","photos":[],"link":"","_id":"ck8p7vtn20001ahtxbkps6go4","content":"<h2 id=\"会议记录-2019年7月31日\"><a href=\"#会议记录-2019年7月31日\" class=\"headerlink\" title=\"会议记录-2019年7月31日\"></a>会议记录-2019年7月31日</h2><a id=\"more\"></a>\n<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>2019年7月31日 10：00</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>地点</td>\n<td>学院楼403</td>\n</tr>\n<tr>\n<td>参与人</td>\n<td>李鑫、邱建军、李浩、周俊松、金慧、郁华艳</td>\n</tr>\n<tr>\n<td>汇报人</td>\n<td>李浩、周俊松、金慧、郁华艳</td>\n</tr>\n<tr>\n<td>记录人</td>\n<td>邱建军</td>\n</tr>\n</tbody></table>\n<h3 id=\"1、金慧-MapReduce的过程及应用\"><a href=\"#1、金慧-MapReduce的过程及应用\" class=\"headerlink\" title=\"1、金慧-MapReduce的过程及应用\"></a>1、金慧-MapReduce的过程及应用</h3><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> MapReudce 的过程</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 三个应用<ol>\n<li>数据去重</li>\n<li>倒排索引</li>\n<li>共现矩阵</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"2、郁华艳-GFS、MapReduce、Bigtable\"><a href=\"#2、郁华艳-GFS、MapReduce、Bigtable\" class=\"headerlink\" title=\"2、郁华艳-GFS、MapReduce、Bigtable\"></a>2、郁华艳-GFS、MapReduce、Bigtable</h3><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> ​    Google文件系统GFS</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> ​    分布式数据处理MapReduce</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> ​    分布式结构化数据表Bigtable</li>\n</ul>\n<h3 id=\"3、李浩-Docker\"><a href=\"#3、李浩-Docker\" class=\"headerlink\" title=\"3、李浩-Docker\"></a>3、李浩-Docker</h3><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Docker简介</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Dcoker的基本架构</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Docker应用-WordPress博客的搭建</li>\n</ul>\n<h3 id=\"4、周俊松-上周总结\"><a href=\"#4、周俊松-上周总结\" class=\"headerlink\" title=\"4、周俊松-上周总结\"></a>4、周俊松-上周总结</h3><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> ​    正向代理、反向代理</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> ​    Samba文件服务器</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> ​    GitLab-Docker方式部署</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> ​    GitLab使用</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"会议记录-2019年7月31日\"><a href=\"#会议记录-2019年7月31日\" class=\"headerlink\" title=\"会议记录-2019年7月31日\"></a>会议记录-2019年7月31日</h2>","more":"<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>2019年7月31日 10：00</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>地点</td>\n<td>学院楼403</td>\n</tr>\n<tr>\n<td>参与人</td>\n<td>李鑫、邱建军、李浩、周俊松、金慧、郁华艳</td>\n</tr>\n<tr>\n<td>汇报人</td>\n<td>李浩、周俊松、金慧、郁华艳</td>\n</tr>\n<tr>\n<td>记录人</td>\n<td>邱建军</td>\n</tr>\n</tbody></table>\n<h3 id=\"1、金慧-MapReduce的过程及应用\"><a href=\"#1、金慧-MapReduce的过程及应用\" class=\"headerlink\" title=\"1、金慧-MapReduce的过程及应用\"></a>1、金慧-MapReduce的过程及应用</h3><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> MapReudce 的过程</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 三个应用<ol>\n<li>数据去重</li>\n<li>倒排索引</li>\n<li>共现矩阵</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"2、郁华艳-GFS、MapReduce、Bigtable\"><a href=\"#2、郁华艳-GFS、MapReduce、Bigtable\" class=\"headerlink\" title=\"2、郁华艳-GFS、MapReduce、Bigtable\"></a>2、郁华艳-GFS、MapReduce、Bigtable</h3><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> ​    Google文件系统GFS</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> ​    分布式数据处理MapReduce</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> ​    分布式结构化数据表Bigtable</li>\n</ul>\n<h3 id=\"3、李浩-Docker\"><a href=\"#3、李浩-Docker\" class=\"headerlink\" title=\"3、李浩-Docker\"></a>3、李浩-Docker</h3><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Docker简介</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Dcoker的基本架构</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Docker应用-WordPress博客的搭建</li>\n</ul>\n<h3 id=\"4、周俊松-上周总结\"><a href=\"#4、周俊松-上周总结\" class=\"headerlink\" title=\"4、周俊松-上周总结\"></a>4、周俊松-上周总结</h3><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> ​    正向代理、反向代理</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> ​    Samba文件服务器</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> ​    GitLab-Docker方式部署</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> ​    GitLab使用</li>\n</ul>"},{"layout":"post","title":"把Hexo部署到vps","date":"2020-04-06T08:26:00.000Z","comments":1,"_content":"\n#### 准备工作\n\n1、假设本地已经安装好hexo环境\n\n1.1 购买服务器.\n\n1.2 购买域名,可以从阿里云购买,之后在控制台进行域名解析即可。\n\n2、购买vps以后，可通过`ssh`登录服务器操作。\n\n`ssh root@155.138.x.x`\n\n![](https://s1.ax1x.com/2020/04/05/GrdtbD.png)\n\n<!--more-->\n\n##### 安装相关软件git\n\n然后安装git：`git --version` // 如无，则安装\n\n`yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel && yum install -y git`\n\n1. 创建用户并配置其仓库，执行如下命令\n\n   `useradd git`\n\n   `passwd git` // 设置密码\n\n   `su git `\n\n  ` cd /home/git/`\n\n  ` mkdir -p projects/blog ` // 存放编译好的web文件，供nginx访问\n\n   `mkdir repos && cd repos`\n\n   `git init --bare blog.git` // 创建一个裸露的仓库\n\n  ` cd blog.git/hooks`\n\n  ` vi post-receive `// 创建hook钩子（后面单独说，很有用的一个功能），输入\n\n   `#!/bin/sh`\n   `git --work-tree=/home/git/projects/blog --git-dir=/home/git/repos/blog.git checkout -f`\n\n   添加完毕后修改权限，执行如下命令\n\n   `chmod +x post-receive`  //给钩子添加执行权限\n\n   `exit `// 退出到 root \n\n   `chown -R git:git /home/git/repos/blog.git` // 添加权限\n\n   测试git是否能用：在本地找空白文件夹，执行如下命令\n\n   `git clone [git@server_ip:/home/git/repos/blog.git](mailto:git@server_ip:/home/git/repos/blog.git)`\n\n   建立ssh信任关系，在本地电脑，执行如下命令\n\n   `ssh-copy-id -i ~/.ssh/id_rsa.pub git@server_ip`\n\n   `ssh git@server_ip` // 测试能否登录\n   \n\n   ------\n\n   \n\n2. 安装nginx\n\n   下载并安装`nginx`，执行如下命令\n\n   `cd /usr/local/src`\n\n   `wget http://nginx.org/download/nginx-1.15.2.tar.gz`\n\n   `tar xzvf nginx-1.15.2.tar.gz`\n\n   `cd nginx-1.15.2`\n\n   `./configure `// 如果后面还想要配置 SSL 协议，就执行后面一句！\n\n   `./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-file-aio --with-http_realip_module`\n\n   `make && make install`\n\n   `alias nginx='/usr/local/nginx/sbin/nginx'` // 为nginx取别名，后面可直接\n\n   `yum -y install gcc gcc-c++ autoconf automake make`\n\n   先启动是否安装成功，执行如下命令 ` nginx`\n\n   `nginx -s stop` // 先停止nginx*\n\n   `cd /usr/local/nginx/conf`\n\n   `vi nginx.conf`\n\n   修改root 解析路径，如下图\n\n   ![](https://s1.ax1x.com/2020/04/06/GyFi1P.png)\n\n   *同时将* *user 改为 root 如下图，如下图*\n\n   ![](https://s1.ax1x.com/2020/04/06/GyibSx.png)\n\n   `nginx -s reload`\n\n   \n\n3. 修改本地hexo的配置文件`_config.yml`文件\n\n   编辑_config.yml的`deploy`\n\n   ![](https://s1.ax1x.com/2020/04/06/GyiUQf.png)\n\n4. 在本地hexo目录下执行 `hexo clean  &&  hexo g &&  hexo d`\n\n\n\n### 错误解决\n\n1. `nginx: [error] open() \"/usr/local/nginx/logs/nginx.pid\" failed (2: No such file or directory)`\n\n   解决：使用指定nginx.conf文件的方式重启：`nginx/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf`\n\n2. `nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)`\n\n   解决：`ps -aux | grep nginx  &&  kill -9 pid`\n\n   ","source":"_posts/depoly hexo to vps.md","raw":"---\nlayout: post\ntitle: \"把Hexo部署到vps\"\ndate: 2020-04-06 16:26\ncomments: true\ntags: \n  - hexo\n  - blog\n---\n\n#### 准备工作\n\n1、假设本地已经安装好hexo环境\n\n1.1 购买服务器.\n\n1.2 购买域名,可以从阿里云购买,之后在控制台进行域名解析即可。\n\n2、购买vps以后，可通过`ssh`登录服务器操作。\n\n`ssh root@155.138.x.x`\n\n![](https://s1.ax1x.com/2020/04/05/GrdtbD.png)\n\n<!--more-->\n\n##### 安装相关软件git\n\n然后安装git：`git --version` // 如无，则安装\n\n`yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel && yum install -y git`\n\n1. 创建用户并配置其仓库，执行如下命令\n\n   `useradd git`\n\n   `passwd git` // 设置密码\n\n   `su git `\n\n  ` cd /home/git/`\n\n  ` mkdir -p projects/blog ` // 存放编译好的web文件，供nginx访问\n\n   `mkdir repos && cd repos`\n\n   `git init --bare blog.git` // 创建一个裸露的仓库\n\n  ` cd blog.git/hooks`\n\n  ` vi post-receive `// 创建hook钩子（后面单独说，很有用的一个功能），输入\n\n   `#!/bin/sh`\n   `git --work-tree=/home/git/projects/blog --git-dir=/home/git/repos/blog.git checkout -f`\n\n   添加完毕后修改权限，执行如下命令\n\n   `chmod +x post-receive`  //给钩子添加执行权限\n\n   `exit `// 退出到 root \n\n   `chown -R git:git /home/git/repos/blog.git` // 添加权限\n\n   测试git是否能用：在本地找空白文件夹，执行如下命令\n\n   `git clone [git@server_ip:/home/git/repos/blog.git](mailto:git@server_ip:/home/git/repos/blog.git)`\n\n   建立ssh信任关系，在本地电脑，执行如下命令\n\n   `ssh-copy-id -i ~/.ssh/id_rsa.pub git@server_ip`\n\n   `ssh git@server_ip` // 测试能否登录\n   \n\n   ------\n\n   \n\n2. 安装nginx\n\n   下载并安装`nginx`，执行如下命令\n\n   `cd /usr/local/src`\n\n   `wget http://nginx.org/download/nginx-1.15.2.tar.gz`\n\n   `tar xzvf nginx-1.15.2.tar.gz`\n\n   `cd nginx-1.15.2`\n\n   `./configure `// 如果后面还想要配置 SSL 协议，就执行后面一句！\n\n   `./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-file-aio --with-http_realip_module`\n\n   `make && make install`\n\n   `alias nginx='/usr/local/nginx/sbin/nginx'` // 为nginx取别名，后面可直接\n\n   `yum -y install gcc gcc-c++ autoconf automake make`\n\n   先启动是否安装成功，执行如下命令 ` nginx`\n\n   `nginx -s stop` // 先停止nginx*\n\n   `cd /usr/local/nginx/conf`\n\n   `vi nginx.conf`\n\n   修改root 解析路径，如下图\n\n   ![](https://s1.ax1x.com/2020/04/06/GyFi1P.png)\n\n   *同时将* *user 改为 root 如下图，如下图*\n\n   ![](https://s1.ax1x.com/2020/04/06/GyibSx.png)\n\n   `nginx -s reload`\n\n   \n\n3. 修改本地hexo的配置文件`_config.yml`文件\n\n   编辑_config.yml的`deploy`\n\n   ![](https://s1.ax1x.com/2020/04/06/GyiUQf.png)\n\n4. 在本地hexo目录下执行 `hexo clean  &&  hexo g &&  hexo d`\n\n\n\n### 错误解决\n\n1. `nginx: [error] open() \"/usr/local/nginx/logs/nginx.pid\" failed (2: No such file or directory)`\n\n   解决：使用指定nginx.conf文件的方式重启：`nginx/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf`\n\n2. `nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)`\n\n   解决：`ps -aux | grep nginx  &&  kill -9 pid`\n\n   ","slug":"depoly hexo to vps","published":1,"updated":"2020-04-06T08:37:41.757Z","photos":[],"link":"","_id":"ck8p7vtn60003ahtx4249a43e","content":"<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><p>1、假设本地已经安装好hexo环境</p>\n<p>1.1 购买服务器.</p>\n<p>1.2 购买域名,可以从阿里云购买,之后在控制台进行域名解析即可。</p>\n<p>2、购买vps以后，可通过<code>ssh</code>登录服务器操作。</p>\n<p><code>ssh root@155.138.x.x</code></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/05/GrdtbD.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n\n<h5 id=\"安装相关软件git\"><a href=\"#安装相关软件git\" class=\"headerlink\" title=\"安装相关软件git\"></a>安装相关软件git</h5><p>然后安装git：<code>git --version</code> // 如无，则安装</p>\n<p><code>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel &amp;&amp; yum install -y git</code></p>\n<ol>\n<li><p>创建用户并配置其仓库，执行如下命令</p>\n<p><code>useradd git</code></p>\n<p><code>passwd git</code> // 设置密码</p>\n<p><code>su git</code></p>\n<p><code>cd /home/git/</code></p>\n<p><code>mkdir -p projects/blog</code> // 存放编译好的web文件，供nginx访问</p>\n<p><code>mkdir repos &amp;&amp; cd repos</code></p>\n<p><code>git init --bare blog.git</code> // 创建一个裸露的仓库</p>\n<p><code>cd blog.git/hooks</code></p>\n<p><code>vi post-receive</code>// 创建hook钩子（后面单独说，很有用的一个功能），输入</p>\n<p><code>#!/bin/sh</code><br><code>git --work-tree=/home/git/projects/blog --git-dir=/home/git/repos/blog.git checkout -f</code></p>\n<p>添加完毕后修改权限，执行如下命令</p>\n<p><code>chmod +x post-receive</code>  //给钩子添加执行权限</p>\n<p><code>exit</code>// 退出到 root </p>\n<p><code>chown -R git:git /home/git/repos/blog.git</code> // 添加权限</p>\n<p>测试git是否能用：在本地找空白文件夹，执行如下命令</p>\n<p><code>git clone [git@server_ip:/home/git/repos/blog.git](mailto:git@server_ip:/home/git/repos/blog.git)</code></p>\n<p>建立ssh信任关系，在本地电脑，执行如下命令</p>\n<p><code>ssh-copy-id -i ~/.ssh/id_rsa.pub git@server_ip</code></p>\n<p><code>ssh git@server_ip</code> // 测试能否登录</p>\n</li>\n</ol>\n<hr>\n<ol start=\"2\">\n<li><p>安装nginx</p>\n<p>下载并安装<code>nginx</code>，执行如下命令</p>\n<p><code>cd /usr/local/src</code></p>\n<p><code>wget http://nginx.org/download/nginx-1.15.2.tar.gz</code></p>\n<p><code>tar xzvf nginx-1.15.2.tar.gz</code></p>\n<p><code>cd nginx-1.15.2</code></p>\n<p><code>./configure</code>// 如果后面还想要配置 SSL 协议，就执行后面一句！</p>\n<p><code>./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-file-aio --with-http_realip_module</code></p>\n<p><code>make &amp;&amp; make install</code></p>\n<p><code>alias nginx=&#39;/usr/local/nginx/sbin/nginx&#39;</code> // 为nginx取别名，后面可直接</p>\n<p><code>yum -y install gcc gcc-c++ autoconf automake make</code></p>\n<p>先启动是否安装成功，执行如下命令 <code>nginx</code></p>\n<p><code>nginx -s stop</code> // 先停止nginx*</p>\n<p><code>cd /usr/local/nginx/conf</code></p>\n<p><code>vi nginx.conf</code></p>\n<p>修改root 解析路径，如下图</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/06/GyFi1P.png\" alt=\"\"></p>\n<p><em>同时将</em> <em>user 改为 root 如下图，如下图</em></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/06/GyibSx.png\" alt=\"\"></p>\n<p><code>nginx -s reload</code></p>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>修改本地hexo的配置文件<code>_config.yml</code>文件</p>\n<p>编辑_config.yml的<code>deploy</code></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/06/GyiUQf.png\" alt=\"\"></p>\n</li>\n<li><p>在本地hexo目录下执行 <code>hexo clean  &amp;&amp;  hexo g &amp;&amp;  hexo d</code></p>\n</li>\n</ol>\n<h3 id=\"错误解决\"><a href=\"#错误解决\" class=\"headerlink\" title=\"错误解决\"></a>错误解决</h3><ol>\n<li><p><code>nginx: [error] open() &quot;/usr/local/nginx/logs/nginx.pid&quot; failed (2: No such file or directory)</code></p>\n<p>解决：使用指定nginx.conf文件的方式重启：<code>nginx/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</code></p>\n</li>\n<li><p><code>nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</code></p>\n<p>解决：<code>ps -aux | grep nginx  &amp;&amp;  kill -9 pid</code></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><p>1、假设本地已经安装好hexo环境</p>\n<p>1.1 购买服务器.</p>\n<p>1.2 购买域名,可以从阿里云购买,之后在控制台进行域名解析即可。</p>\n<p>2、购买vps以后，可通过<code>ssh</code>登录服务器操作。</p>\n<p><code>ssh root@155.138.x.x</code></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/05/GrdtbD.png\" alt=\"\"></p>","more":"<h5 id=\"安装相关软件git\"><a href=\"#安装相关软件git\" class=\"headerlink\" title=\"安装相关软件git\"></a>安装相关软件git</h5><p>然后安装git：<code>git --version</code> // 如无，则安装</p>\n<p><code>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel &amp;&amp; yum install -y git</code></p>\n<ol>\n<li><p>创建用户并配置其仓库，执行如下命令</p>\n<p><code>useradd git</code></p>\n<p><code>passwd git</code> // 设置密码</p>\n<p><code>su git</code></p>\n<p><code>cd /home/git/</code></p>\n<p><code>mkdir -p projects/blog</code> // 存放编译好的web文件，供nginx访问</p>\n<p><code>mkdir repos &amp;&amp; cd repos</code></p>\n<p><code>git init --bare blog.git</code> // 创建一个裸露的仓库</p>\n<p><code>cd blog.git/hooks</code></p>\n<p><code>vi post-receive</code>// 创建hook钩子（后面单独说，很有用的一个功能），输入</p>\n<p><code>#!/bin/sh</code><br><code>git --work-tree=/home/git/projects/blog --git-dir=/home/git/repos/blog.git checkout -f</code></p>\n<p>添加完毕后修改权限，执行如下命令</p>\n<p><code>chmod +x post-receive</code>  //给钩子添加执行权限</p>\n<p><code>exit</code>// 退出到 root </p>\n<p><code>chown -R git:git /home/git/repos/blog.git</code> // 添加权限</p>\n<p>测试git是否能用：在本地找空白文件夹，执行如下命令</p>\n<p><code>git clone [git@server_ip:/home/git/repos/blog.git](mailto:git@server_ip:/home/git/repos/blog.git)</code></p>\n<p>建立ssh信任关系，在本地电脑，执行如下命令</p>\n<p><code>ssh-copy-id -i ~/.ssh/id_rsa.pub git@server_ip</code></p>\n<p><code>ssh git@server_ip</code> // 测试能否登录</p>\n</li>\n</ol>\n<hr>\n<ol start=\"2\">\n<li><p>安装nginx</p>\n<p>下载并安装<code>nginx</code>，执行如下命令</p>\n<p><code>cd /usr/local/src</code></p>\n<p><code>wget http://nginx.org/download/nginx-1.15.2.tar.gz</code></p>\n<p><code>tar xzvf nginx-1.15.2.tar.gz</code></p>\n<p><code>cd nginx-1.15.2</code></p>\n<p><code>./configure</code>// 如果后面还想要配置 SSL 协议，就执行后面一句！</p>\n<p><code>./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-file-aio --with-http_realip_module</code></p>\n<p><code>make &amp;&amp; make install</code></p>\n<p><code>alias nginx=&#39;/usr/local/nginx/sbin/nginx&#39;</code> // 为nginx取别名，后面可直接</p>\n<p><code>yum -y install gcc gcc-c++ autoconf automake make</code></p>\n<p>先启动是否安装成功，执行如下命令 <code>nginx</code></p>\n<p><code>nginx -s stop</code> // 先停止nginx*</p>\n<p><code>cd /usr/local/nginx/conf</code></p>\n<p><code>vi nginx.conf</code></p>\n<p>修改root 解析路径，如下图</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/06/GyFi1P.png\" alt=\"\"></p>\n<p><em>同时将</em> <em>user 改为 root 如下图，如下图</em></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/06/GyibSx.png\" alt=\"\"></p>\n<p><code>nginx -s reload</code></p>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>修改本地hexo的配置文件<code>_config.yml</code>文件</p>\n<p>编辑_config.yml的<code>deploy</code></p>\n<p><img src=\"https://s1.ax1x.com/2020/04/06/GyiUQf.png\" alt=\"\"></p>\n</li>\n<li><p>在本地hexo目录下执行 <code>hexo clean  &amp;&amp;  hexo g &amp;&amp;  hexo d</code></p>\n</li>\n</ol>\n<h3 id=\"错误解决\"><a href=\"#错误解决\" class=\"headerlink\" title=\"错误解决\"></a>错误解决</h3><ol>\n<li><p><code>nginx: [error] open() &quot;/usr/local/nginx/logs/nginx.pid&quot; failed (2: No such file or directory)</code></p>\n<p>解决：使用指定nginx.conf文件的方式重启：<code>nginx/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</code></p>\n</li>\n<li><p><code>nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</code></p>\n<p>解决：<code>ps -aux | grep nginx  &amp;&amp;  kill -9 pid</code></p>\n</li>\n</ol>"},{"layout":"post","title":"动态代理","date":"2020-04-01T06:48:00.000Z","comments":1,"_content":"\n\n   代理模式是为了提供额外或不同的操作，而插入的用来替代”实际”对象的对象，这些操作涉及到与”实际”对象的通信，因此代理通常充当中间人角色。Java的动态代理比代理的思想更前进了一步，它可以动态地创建并代理并动态地处理对所代理方法的调用。在动态代理上所做的所有调用都会被重定向到单一的调用处理器上，它的工作是揭示调用的类型并确定相应的策略。以下是一个动态代理示例：\n   \n   接口和实现类：\n   \t\n\tpublic interface Interface {\n    void doSomething();\n    void somethingElse(String arg);\n\t}\n\tpublic class RealObject implements Interface {\n    public void doSomething() {\n        System.out.println(\"doSomething.\");\n    }\n    public void somethingElse(String arg) {\n        System.out.println(\"somethingElse \" + arg);\n    }\n\t}\n<!--more-->\n   动态代理对象处理器：\n   \n    \tpublic class DynamicProxyHandler implements InvocationHandler {\n    private Object proxyed;\n    \n    public DynamicProxyHandler(Object proxyed) {\n        this.proxyed = proxyed;\n    }\n    \n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n        System.out.println(\"代理工作了.\");\n        return method.invoke(proxyed, args);\n    }\n\t}\n\n测试类：\n\n\tpublic class Main {\n    public static void main(String[] args) {\n        RealObject real = new RealObject();\n        Interface proxy = (Interface) Proxy.newProxyInstance(\n                Interface.class.getClassLoader(), new Class[] {Interface.class},\n                new DynamicProxyHandler(real));\n        \n        proxy.doSomething();\n        proxy.somethingElse(\"luoxn28\");\n    }\n \t}\n \t\n 通过调用Proxy静态方法Proxy.newProxyInstance()可以创建动态代理，这个方法需要得到一个类加载器，一个你希望该代理实现的接口列表(不是类或抽象类)，以及InvocationHandler的一个实现类。动态代理可以将所有调用重定向到调用处理器，因此通常会调用处理器的构造器传递一个”实际”对象的引用，从而将调用处理器在执行中介任务时，将请求转发。","source":"_posts/java-dynamic proxy.md","raw":"---\nlayout: post\ntitle: \"动态代理\"\ndate: 2020-04-01 14:48\ncomments: true\ntags: \n\t- java\n\t\n---\n\n\n   代理模式是为了提供额外或不同的操作，而插入的用来替代”实际”对象的对象，这些操作涉及到与”实际”对象的通信，因此代理通常充当中间人角色。Java的动态代理比代理的思想更前进了一步，它可以动态地创建并代理并动态地处理对所代理方法的调用。在动态代理上所做的所有调用都会被重定向到单一的调用处理器上，它的工作是揭示调用的类型并确定相应的策略。以下是一个动态代理示例：\n   \n   接口和实现类：\n   \t\n\tpublic interface Interface {\n    void doSomething();\n    void somethingElse(String arg);\n\t}\n\tpublic class RealObject implements Interface {\n    public void doSomething() {\n        System.out.println(\"doSomething.\");\n    }\n    public void somethingElse(String arg) {\n        System.out.println(\"somethingElse \" + arg);\n    }\n\t}\n<!--more-->\n   动态代理对象处理器：\n   \n    \tpublic class DynamicProxyHandler implements InvocationHandler {\n    private Object proxyed;\n    \n    public DynamicProxyHandler(Object proxyed) {\n        this.proxyed = proxyed;\n    }\n    \n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n        System.out.println(\"代理工作了.\");\n        return method.invoke(proxyed, args);\n    }\n\t}\n\n测试类：\n\n\tpublic class Main {\n    public static void main(String[] args) {\n        RealObject real = new RealObject();\n        Interface proxy = (Interface) Proxy.newProxyInstance(\n                Interface.class.getClassLoader(), new Class[] {Interface.class},\n                new DynamicProxyHandler(real));\n        \n        proxy.doSomething();\n        proxy.somethingElse(\"luoxn28\");\n    }\n \t}\n \t\n 通过调用Proxy静态方法Proxy.newProxyInstance()可以创建动态代理，这个方法需要得到一个类加载器，一个你希望该代理实现的接口列表(不是类或抽象类)，以及InvocationHandler的一个实现类。动态代理可以将所有调用重定向到调用处理器，因此通常会调用处理器的构造器传递一个”实际”对象的引用，从而将调用处理器在执行中介任务时，将请求转发。","slug":"java-dynamic proxy","published":1,"updated":"2020-04-07T01:21:58.975Z","_id":"ck8p7vtn70004ahtxbog7bptb","photos":[],"link":"","content":"<p>   代理模式是为了提供额外或不同的操作，而插入的用来替代”实际”对象的对象，这些操作涉及到与”实际”对象的通信，因此代理通常充当中间人角色。Java的动态代理比代理的思想更前进了一步，它可以动态地创建并代理并动态地处理对所代理方法的调用。在动态代理上所做的所有调用都会被重定向到单一的调用处理器上，它的工作是揭示调用的类型并确定相应的策略。以下是一个动态代理示例：</p>\n<p>   接口和实现类：</p>\n<pre><code>public interface Interface {\nvoid doSomething();\nvoid somethingElse(String arg);\n}\npublic class RealObject implements Interface {\npublic void doSomething() {\n    System.out.println(&quot;doSomething.&quot;);\n}\npublic void somethingElse(String arg) {\n    System.out.println(&quot;somethingElse &quot; + arg);\n}\n}</code></pre><a id=\"more\"></a>\n<p>   动态代理对象处理器：</p>\n<pre><code>    public class DynamicProxyHandler implements InvocationHandler {\nprivate Object proxyed;\n\npublic DynamicProxyHandler(Object proxyed) {\n    this.proxyed = proxyed;\n}\n\n@Override\npublic Object invoke(Object proxy, Method method, Object[] args) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n    System.out.println(&quot;代理工作了.&quot;);\n    return method.invoke(proxyed, args);\n}\n}</code></pre><p>测试类：</p>\n<pre><code>public class Main {\npublic static void main(String[] args) {\n    RealObject real = new RealObject();\n    Interface proxy = (Interface) Proxy.newProxyInstance(\n            Interface.class.getClassLoader(), new Class[] {Interface.class},\n            new DynamicProxyHandler(real));\n\n    proxy.doSomething();\n    proxy.somethingElse(&quot;luoxn28&quot;);\n}\n }</code></pre><p> 通过调用Proxy静态方法Proxy.newProxyInstance()可以创建动态代理，这个方法需要得到一个类加载器，一个你希望该代理实现的接口列表(不是类或抽象类)，以及InvocationHandler的一个实现类。动态代理可以将所有调用重定向到调用处理器，因此通常会调用处理器的构造器传递一个”实际”对象的引用，从而将调用处理器在执行中介任务时，将请求转发。</p>\n","site":{"data":{}},"excerpt":"<p>   代理模式是为了提供额外或不同的操作，而插入的用来替代”实际”对象的对象，这些操作涉及到与”实际”对象的通信，因此代理通常充当中间人角色。Java的动态代理比代理的思想更前进了一步，它可以动态地创建并代理并动态地处理对所代理方法的调用。在动态代理上所做的所有调用都会被重定向到单一的调用处理器上，它的工作是揭示调用的类型并确定相应的策略。以下是一个动态代理示例：</p>\n<p>   接口和实现类：</p>\n<pre><code>public interface Interface {\nvoid doSomething();\nvoid somethingElse(String arg);\n}\npublic class RealObject implements Interface {\npublic void doSomething() {\n    System.out.println(&quot;doSomething.&quot;);\n}\npublic void somethingElse(String arg) {\n    System.out.println(&quot;somethingElse &quot; + arg);\n}\n}</code></pre>","more":"<p>   动态代理对象处理器：</p>\n<pre><code>    public class DynamicProxyHandler implements InvocationHandler {\nprivate Object proxyed;\n\npublic DynamicProxyHandler(Object proxyed) {\n    this.proxyed = proxyed;\n}\n\n@Override\npublic Object invoke(Object proxy, Method method, Object[] args) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n    System.out.println(&quot;代理工作了.&quot;);\n    return method.invoke(proxyed, args);\n}\n}</code></pre><p>测试类：</p>\n<pre><code>public class Main {\npublic static void main(String[] args) {\n    RealObject real = new RealObject();\n    Interface proxy = (Interface) Proxy.newProxyInstance(\n            Interface.class.getClassLoader(), new Class[] {Interface.class},\n            new DynamicProxyHandler(real));\n\n    proxy.doSomething();\n    proxy.somethingElse(&quot;luoxn28&quot;);\n}\n }</code></pre><p> 通过调用Proxy静态方法Proxy.newProxyInstance()可以创建动态代理，这个方法需要得到一个类加载器，一个你希望该代理实现的接口列表(不是类或抽象类)，以及InvocationHandler的一个实现类。动态代理可以将所有调用重定向到调用处理器，因此通常会调用处理器的构造器传递一个”实际”对象的引用，从而将调用处理器在执行中介任务时，将请求转发。</p>"},{"layout":"post","title":"K8s架构概述","date":"2020-04-05T13:03:00.000Z","comments":1,"_content":"\n\n1、Kubernetes架构\n\n![](https://s1.ax1x.com/2020/04/05/GrkIPI.png)\n<!--more-->\n2、Kubernetes Master\n\n![](https://s1.ax1x.com/2020/04/05/GrAeiR.png)\n\n\n\n3、Kubernetes Node\n\n![](https://s1.ax1x.com/2020/04/05/GrAfyT.png)\n\n4、Deploying a Pod\n\n![](https://s1.ax1x.com/2020/04/05/GrAbf1.png)\n\n\n\n5、Service - Exposing Services\n\n![](https://s1.ax1x.com/2020/04/05/GrESTH.png)\n\n6、Kubernetes Labels&Selector\n\n![](https://s1.ax1x.com/2020/04/05/GrE3cV.png)\n\n\n\n7、Kubernetes Ingress\n\n![](https://s1.ax1x.com/2020/04/05/GrEUAJ.png)\n\n8、Kubernetes PersistentStorage\n\n![](https://s1.ax1x.com/2020/04/05/GrEdhR.png)\n\n9、Kubernetes Overview\n\n![](https://s1.ax1x.com/2020/04/05/GrEcHe.png)\n\n# Kubernetes Features\n\n## 多租户\n\n1. Namespace\n2. ServiceAccount\n3. Role\n4. RoleBind\n5. ClusterRole\n6. ClusterRoleBind\n7. NetworkPolicy\n8. ResourceQuota\n9. Secret  \n\n## 调度\n\n1. Node的亲和性和反亲和性(Affinity/Anti-Affinity)\n2. Node的污点和容忍(Taints and Tolerations)\n3. Pod的的亲和性和反亲和性(Affinity/Anti-Affinity)\n4. 自定义调度器（基于框架的调度器）\n\n## APP访问\n\n- 外部访问\n  1. Service NodePort\n  2. Ingress\n  3. Keepalived + Service NodePort\n  4. Service - Loadbalance\n  5. Loadbalance + 云提供商\n- 内部访问\n  1. Service Cluster ip\n  2. 在Pod中使用Service name\n\n## APP高可用\n\n1. Replication Controller\n2. Deployment + Replica Set\n3. Service expose 服务去代理Pod\n4. Deployment的灰度发布／版本控制／回滚\n5. Daemon Set\n6. Stateful Set\n7. Keepalived\n8. Autoscale\n\n## 服务发现\n\n1. Service\n2. Ingress\n3. Kube-Dns\n\n## 权限\n\n1. ServiceAccount\n2. Role\n3. RoleBind\n4. ClusterRole\n5. ClusterRoleBind\n\n## 网络（提供接口由第三方以插件实现）\n\n1. Weave\n2. Calico\n3. Cni\n    a. bridge plugin               d. ipvlan                g. tuning\n    b. dhcp plugin                  e. macvlan\n    c. host local                       f.  ptp\n\n## 存储\n\n1. StorageClass\n2. PersistentVolume\n3. PersistentVolumeClaim\n4. ConfigMap\n    支持：NFS,Scaleio,PX,Ceph,Vsphere,Glusterfs,GCE,AWS,HostPath,EmptyDir\n\n## 监控\n\n1. Heapster +  influxdb+grafana\n2. Promethues + Kubelet + NodeExporter\n3. Sysdig\n4. Kube-state-metrics  +  Promethues\n\n## 集群高可用\n\n1. Etcd集群\n2. 多api server提供Load Balance\n3. 多ControllerManager（master/standby机制）\n4. 多Scheduler（master/standby机制）\n\n![](https://s1.ax1x.com/2020/04/05/Grm6xI.png)\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/k8s introduction.md","raw":"---\nlayout: post\ntitle: \"K8s架构概述\"\ndate: 2020-04-05 21:03\ncomments: true\ntags: \n\t- k8s\n---\n\n\n1、Kubernetes架构\n\n![](https://s1.ax1x.com/2020/04/05/GrkIPI.png)\n<!--more-->\n2、Kubernetes Master\n\n![](https://s1.ax1x.com/2020/04/05/GrAeiR.png)\n\n\n\n3、Kubernetes Node\n\n![](https://s1.ax1x.com/2020/04/05/GrAfyT.png)\n\n4、Deploying a Pod\n\n![](https://s1.ax1x.com/2020/04/05/GrAbf1.png)\n\n\n\n5、Service - Exposing Services\n\n![](https://s1.ax1x.com/2020/04/05/GrESTH.png)\n\n6、Kubernetes Labels&Selector\n\n![](https://s1.ax1x.com/2020/04/05/GrE3cV.png)\n\n\n\n7、Kubernetes Ingress\n\n![](https://s1.ax1x.com/2020/04/05/GrEUAJ.png)\n\n8、Kubernetes PersistentStorage\n\n![](https://s1.ax1x.com/2020/04/05/GrEdhR.png)\n\n9、Kubernetes Overview\n\n![](https://s1.ax1x.com/2020/04/05/GrEcHe.png)\n\n# Kubernetes Features\n\n## 多租户\n\n1. Namespace\n2. ServiceAccount\n3. Role\n4. RoleBind\n5. ClusterRole\n6. ClusterRoleBind\n7. NetworkPolicy\n8. ResourceQuota\n9. Secret  \n\n## 调度\n\n1. Node的亲和性和反亲和性(Affinity/Anti-Affinity)\n2. Node的污点和容忍(Taints and Tolerations)\n3. Pod的的亲和性和反亲和性(Affinity/Anti-Affinity)\n4. 自定义调度器（基于框架的调度器）\n\n## APP访问\n\n- 外部访问\n  1. Service NodePort\n  2. Ingress\n  3. Keepalived + Service NodePort\n  4. Service - Loadbalance\n  5. Loadbalance + 云提供商\n- 内部访问\n  1. Service Cluster ip\n  2. 在Pod中使用Service name\n\n## APP高可用\n\n1. Replication Controller\n2. Deployment + Replica Set\n3. Service expose 服务去代理Pod\n4. Deployment的灰度发布／版本控制／回滚\n5. Daemon Set\n6. Stateful Set\n7. Keepalived\n8. Autoscale\n\n## 服务发现\n\n1. Service\n2. Ingress\n3. Kube-Dns\n\n## 权限\n\n1. ServiceAccount\n2. Role\n3. RoleBind\n4. ClusterRole\n5. ClusterRoleBind\n\n## 网络（提供接口由第三方以插件实现）\n\n1. Weave\n2. Calico\n3. Cni\n    a. bridge plugin               d. ipvlan                g. tuning\n    b. dhcp plugin                  e. macvlan\n    c. host local                       f.  ptp\n\n## 存储\n\n1. StorageClass\n2. PersistentVolume\n3. PersistentVolumeClaim\n4. ConfigMap\n    支持：NFS,Scaleio,PX,Ceph,Vsphere,Glusterfs,GCE,AWS,HostPath,EmptyDir\n\n## 监控\n\n1. Heapster +  influxdb+grafana\n2. Promethues + Kubelet + NodeExporter\n3. Sysdig\n4. Kube-state-metrics  +  Promethues\n\n## 集群高可用\n\n1. Etcd集群\n2. 多api server提供Load Balance\n3. 多ControllerManager（master/standby机制）\n4. 多Scheduler（master/standby机制）\n\n![](https://s1.ax1x.com/2020/04/05/Grm6xI.png)\n\n\n\n\n\n\n\n\n\n\n\n","slug":"k8s introduction","published":1,"updated":"2020-04-06T01:45:18.424Z","photos":[],"link":"","_id":"ck8p7vtn80005ahtx4cb8a1yv","content":"<p>1、Kubernetes架构</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/05/GrkIPI.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<p>2、Kubernetes Master</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/05/GrAeiR.png\" alt=\"\"></p>\n<p>3、Kubernetes Node</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/05/GrAfyT.png\" alt=\"\"></p>\n<p>4、Deploying a Pod</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/05/GrAbf1.png\" alt=\"\"></p>\n<p>5、Service - Exposing Services</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/05/GrESTH.png\" alt=\"\"></p>\n<p>6、Kubernetes Labels&amp;Selector</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/05/GrE3cV.png\" alt=\"\"></p>\n<p>7、Kubernetes Ingress</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/05/GrEUAJ.png\" alt=\"\"></p>\n<p>8、Kubernetes PersistentStorage</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/05/GrEdhR.png\" alt=\"\"></p>\n<p>9、Kubernetes Overview</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/05/GrEcHe.png\" alt=\"\"></p>\n<h1 id=\"Kubernetes-Features\"><a href=\"#Kubernetes-Features\" class=\"headerlink\" title=\"Kubernetes Features\"></a>Kubernetes Features</h1><h2 id=\"多租户\"><a href=\"#多租户\" class=\"headerlink\" title=\"多租户\"></a>多租户</h2><ol>\n<li>Namespace</li>\n<li>ServiceAccount</li>\n<li>Role</li>\n<li>RoleBind</li>\n<li>ClusterRole</li>\n<li>ClusterRoleBind</li>\n<li>NetworkPolicy</li>\n<li>ResourceQuota</li>\n<li>Secret  </li>\n</ol>\n<h2 id=\"调度\"><a href=\"#调度\" class=\"headerlink\" title=\"调度\"></a>调度</h2><ol>\n<li>Node的亲和性和反亲和性(Affinity/Anti-Affinity)</li>\n<li>Node的污点和容忍(Taints and Tolerations)</li>\n<li>Pod的的亲和性和反亲和性(Affinity/Anti-Affinity)</li>\n<li>自定义调度器（基于框架的调度器）</li>\n</ol>\n<h2 id=\"APP访问\"><a href=\"#APP访问\" class=\"headerlink\" title=\"APP访问\"></a>APP访问</h2><ul>\n<li>外部访问<ol>\n<li>Service NodePort</li>\n<li>Ingress</li>\n<li>Keepalived + Service NodePort</li>\n<li>Service - Loadbalance</li>\n<li>Loadbalance + 云提供商</li>\n</ol>\n</li>\n<li>内部访问<ol>\n<li>Service Cluster ip</li>\n<li>在Pod中使用Service name</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"APP高可用\"><a href=\"#APP高可用\" class=\"headerlink\" title=\"APP高可用\"></a>APP高可用</h2><ol>\n<li>Replication Controller</li>\n<li>Deployment + Replica Set</li>\n<li>Service expose 服务去代理Pod</li>\n<li>Deployment的灰度发布／版本控制／回滚</li>\n<li>Daemon Set</li>\n<li>Stateful Set</li>\n<li>Keepalived</li>\n<li>Autoscale</li>\n</ol>\n<h2 id=\"服务发现\"><a href=\"#服务发现\" class=\"headerlink\" title=\"服务发现\"></a>服务发现</h2><ol>\n<li>Service</li>\n<li>Ingress</li>\n<li>Kube-Dns</li>\n</ol>\n<h2 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h2><ol>\n<li>ServiceAccount</li>\n<li>Role</li>\n<li>RoleBind</li>\n<li>ClusterRole</li>\n<li>ClusterRoleBind</li>\n</ol>\n<h2 id=\"网络（提供接口由第三方以插件实现）\"><a href=\"#网络（提供接口由第三方以插件实现）\" class=\"headerlink\" title=\"网络（提供接口由第三方以插件实现）\"></a>网络（提供接口由第三方以插件实现）</h2><ol>\n<li>Weave</li>\n<li>Calico</li>\n<li>Cni<br> a. bridge plugin               d. ipvlan                g. tuning<br> b. dhcp plugin                  e. macvlan<br> c. host local                       f.  ptp</li>\n</ol>\n<h2 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h2><ol>\n<li>StorageClass</li>\n<li>PersistentVolume</li>\n<li>PersistentVolumeClaim</li>\n<li>ConfigMap<br> 支持：NFS,Scaleio,PX,Ceph,Vsphere,Glusterfs,GCE,AWS,HostPath,EmptyDir</li>\n</ol>\n<h2 id=\"监控\"><a href=\"#监控\" class=\"headerlink\" title=\"监控\"></a>监控</h2><ol>\n<li>Heapster +  influxdb+grafana</li>\n<li>Promethues + Kubelet + NodeExporter</li>\n<li>Sysdig</li>\n<li>Kube-state-metrics  +  Promethues</li>\n</ol>\n<h2 id=\"集群高可用\"><a href=\"#集群高可用\" class=\"headerlink\" title=\"集群高可用\"></a>集群高可用</h2><ol>\n<li>Etcd集群</li>\n<li>多api server提供Load Balance</li>\n<li>多ControllerManager（master/standby机制）</li>\n<li>多Scheduler（master/standby机制）</li>\n</ol>\n<p><img src=\"https://s1.ax1x.com/2020/04/05/Grm6xI.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>1、Kubernetes架构</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/05/GrkIPI.png\" alt=\"\"></p>","more":"<p>2、Kubernetes Master</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/05/GrAeiR.png\" alt=\"\"></p>\n<p>3、Kubernetes Node</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/05/GrAfyT.png\" alt=\"\"></p>\n<p>4、Deploying a Pod</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/05/GrAbf1.png\" alt=\"\"></p>\n<p>5、Service - Exposing Services</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/05/GrESTH.png\" alt=\"\"></p>\n<p>6、Kubernetes Labels&amp;Selector</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/05/GrE3cV.png\" alt=\"\"></p>\n<p>7、Kubernetes Ingress</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/05/GrEUAJ.png\" alt=\"\"></p>\n<p>8、Kubernetes PersistentStorage</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/05/GrEdhR.png\" alt=\"\"></p>\n<p>9、Kubernetes Overview</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/05/GrEcHe.png\" alt=\"\"></p>\n<h1 id=\"Kubernetes-Features\"><a href=\"#Kubernetes-Features\" class=\"headerlink\" title=\"Kubernetes Features\"></a>Kubernetes Features</h1><h2 id=\"多租户\"><a href=\"#多租户\" class=\"headerlink\" title=\"多租户\"></a>多租户</h2><ol>\n<li>Namespace</li>\n<li>ServiceAccount</li>\n<li>Role</li>\n<li>RoleBind</li>\n<li>ClusterRole</li>\n<li>ClusterRoleBind</li>\n<li>NetworkPolicy</li>\n<li>ResourceQuota</li>\n<li>Secret  </li>\n</ol>\n<h2 id=\"调度\"><a href=\"#调度\" class=\"headerlink\" title=\"调度\"></a>调度</h2><ol>\n<li>Node的亲和性和反亲和性(Affinity/Anti-Affinity)</li>\n<li>Node的污点和容忍(Taints and Tolerations)</li>\n<li>Pod的的亲和性和反亲和性(Affinity/Anti-Affinity)</li>\n<li>自定义调度器（基于框架的调度器）</li>\n</ol>\n<h2 id=\"APP访问\"><a href=\"#APP访问\" class=\"headerlink\" title=\"APP访问\"></a>APP访问</h2><ul>\n<li>外部访问<ol>\n<li>Service NodePort</li>\n<li>Ingress</li>\n<li>Keepalived + Service NodePort</li>\n<li>Service - Loadbalance</li>\n<li>Loadbalance + 云提供商</li>\n</ol>\n</li>\n<li>内部访问<ol>\n<li>Service Cluster ip</li>\n<li>在Pod中使用Service name</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"APP高可用\"><a href=\"#APP高可用\" class=\"headerlink\" title=\"APP高可用\"></a>APP高可用</h2><ol>\n<li>Replication Controller</li>\n<li>Deployment + Replica Set</li>\n<li>Service expose 服务去代理Pod</li>\n<li>Deployment的灰度发布／版本控制／回滚</li>\n<li>Daemon Set</li>\n<li>Stateful Set</li>\n<li>Keepalived</li>\n<li>Autoscale</li>\n</ol>\n<h2 id=\"服务发现\"><a href=\"#服务发现\" class=\"headerlink\" title=\"服务发现\"></a>服务发现</h2><ol>\n<li>Service</li>\n<li>Ingress</li>\n<li>Kube-Dns</li>\n</ol>\n<h2 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h2><ol>\n<li>ServiceAccount</li>\n<li>Role</li>\n<li>RoleBind</li>\n<li>ClusterRole</li>\n<li>ClusterRoleBind</li>\n</ol>\n<h2 id=\"网络（提供接口由第三方以插件实现）\"><a href=\"#网络（提供接口由第三方以插件实现）\" class=\"headerlink\" title=\"网络（提供接口由第三方以插件实现）\"></a>网络（提供接口由第三方以插件实现）</h2><ol>\n<li>Weave</li>\n<li>Calico</li>\n<li>Cni<br> a. bridge plugin               d. ipvlan                g. tuning<br> b. dhcp plugin                  e. macvlan<br> c. host local                       f.  ptp</li>\n</ol>\n<h2 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h2><ol>\n<li>StorageClass</li>\n<li>PersistentVolume</li>\n<li>PersistentVolumeClaim</li>\n<li>ConfigMap<br> 支持：NFS,Scaleio,PX,Ceph,Vsphere,Glusterfs,GCE,AWS,HostPath,EmptyDir</li>\n</ol>\n<h2 id=\"监控\"><a href=\"#监控\" class=\"headerlink\" title=\"监控\"></a>监控</h2><ol>\n<li>Heapster +  influxdb+grafana</li>\n<li>Promethues + Kubelet + NodeExporter</li>\n<li>Sysdig</li>\n<li>Kube-state-metrics  +  Promethues</li>\n</ol>\n<h2 id=\"集群高可用\"><a href=\"#集群高可用\" class=\"headerlink\" title=\"集群高可用\"></a>集群高可用</h2><ol>\n<li>Etcd集群</li>\n<li>多api server提供Load Balance</li>\n<li>多ControllerManager（master/standby机制）</li>\n<li>多Scheduler（master/standby机制）</li>\n</ol>\n<p><img src=\"https://s1.ax1x.com/2020/04/05/Grm6xI.png\" alt=\"\"></p>"},{"layout":"post","title":"ELK初探","date":"2020-04-05T12:26:00.000Z","comments":1,"_content":"\n## 1、Logspout + Graylog\n## 2、ELK（EFK）\n\n#### ELK典型架构\n![](https://s1.ax1x.com/2020/04/05/Grpqrd.png)\n<!--more-->\n#### ELK优化架构\n![](https://s1.ax1x.com/2020/04/05/Gr9WQg.png)\n\n#### ELK — Kafka  VS Redis\n  `ELK Stack 官网建议使用 Redis 来做消息队列，但是正常建议采用 Kafka。 `\n\n| 数据丢失                                               | 数据堆积                                                     |\n| ------------------------------------------------------ | ------------------------------------------------------------ |\n| 1.Redis 队列多用于实时性较高的消息推送，并不保证可靠； | 1.Redis 队列容量取决于机器内存大小，如果超过设置的Max memory，数据就会抛弃； |\n| 2.Kafka保证可靠但有点延时。                            | 2.Kafka 的堆积能力取决于机器硬盘大小。                       |\n\n#### ELK部署方式\n\n1. 传统分布式部署\n2. Docker方式部署\n3. 在K8S集群中部署（Helm）\n\n","source":"_posts/elk.md","raw":"---\nlayout: post\ntitle: \"ELK初探\"\ndate: 2020-04-05 20:26\ncomments: true\ntags: \n\t- ELK\n  - k8s\n---\n\n## 1、Logspout + Graylog\n## 2、ELK（EFK）\n\n#### ELK典型架构\n![](https://s1.ax1x.com/2020/04/05/Grpqrd.png)\n<!--more-->\n#### ELK优化架构\n![](https://s1.ax1x.com/2020/04/05/Gr9WQg.png)\n\n#### ELK — Kafka  VS Redis\n  `ELK Stack 官网建议使用 Redis 来做消息队列，但是正常建议采用 Kafka。 `\n\n| 数据丢失                                               | 数据堆积                                                     |\n| ------------------------------------------------------ | ------------------------------------------------------------ |\n| 1.Redis 队列多用于实时性较高的消息推送，并不保证可靠； | 1.Redis 队列容量取决于机器内存大小，如果超过设置的Max memory，数据就会抛弃； |\n| 2.Kafka保证可靠但有点延时。                            | 2.Kafka 的堆积能力取决于机器硬盘大小。                       |\n\n#### ELK部署方式\n\n1. 传统分布式部署\n2. Docker方式部署\n3. 在K8S集群中部署（Helm）\n\n","slug":"elk","published":1,"updated":"2020-04-07T01:21:33.442Z","_id":"ck8p7vtn90008ahtxg0uhdebb","photos":[],"link":"","content":"<h2 id=\"1、Logspout-Graylog\"><a href=\"#1、Logspout-Graylog\" class=\"headerlink\" title=\"1、Logspout + Graylog\"></a>1、Logspout + Graylog</h2><h2 id=\"2、ELK（EFK）\"><a href=\"#2、ELK（EFK）\" class=\"headerlink\" title=\"2、ELK（EFK）\"></a>2、ELK（EFK）</h2><h4 id=\"ELK典型架构\"><a href=\"#ELK典型架构\" class=\"headerlink\" title=\"ELK典型架构\"></a>ELK典型架构</h4><p><img src=\"https://s1.ax1x.com/2020/04/05/Grpqrd.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h4 id=\"ELK优化架构\"><a href=\"#ELK优化架构\" class=\"headerlink\" title=\"ELK优化架构\"></a>ELK优化架构</h4><p><img src=\"https://s1.ax1x.com/2020/04/05/Gr9WQg.png\" alt=\"\"></p>\n<h4 id=\"ELK-—-Kafka-VS-Redis\"><a href=\"#ELK-—-Kafka-VS-Redis\" class=\"headerlink\" title=\"ELK — Kafka  VS Redis\"></a>ELK — Kafka  VS Redis</h4><p>  <code>ELK Stack 官网建议使用 Redis 来做消息队列，但是正常建议采用 Kafka。</code></p>\n<table>\n<thead>\n<tr>\n<th>数据丢失</th>\n<th>数据堆积</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1.Redis 队列多用于实时性较高的消息推送，并不保证可靠；</td>\n<td>1.Redis 队列容量取决于机器内存大小，如果超过设置的Max memory，数据就会抛弃；</td>\n</tr>\n<tr>\n<td>2.Kafka保证可靠但有点延时。</td>\n<td>2.Kafka 的堆积能力取决于机器硬盘大小。</td>\n</tr>\n</tbody></table>\n<h4 id=\"ELK部署方式\"><a href=\"#ELK部署方式\" class=\"headerlink\" title=\"ELK部署方式\"></a>ELK部署方式</h4><ol>\n<li>传统分布式部署</li>\n<li>Docker方式部署</li>\n<li>在K8S集群中部署（Helm）</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"1、Logspout-Graylog\"><a href=\"#1、Logspout-Graylog\" class=\"headerlink\" title=\"1、Logspout + Graylog\"></a>1、Logspout + Graylog</h2><h2 id=\"2、ELK（EFK）\"><a href=\"#2、ELK（EFK）\" class=\"headerlink\" title=\"2、ELK（EFK）\"></a>2、ELK（EFK）</h2><h4 id=\"ELK典型架构\"><a href=\"#ELK典型架构\" class=\"headerlink\" title=\"ELK典型架构\"></a>ELK典型架构</h4><p><img src=\"https://s1.ax1x.com/2020/04/05/Grpqrd.png\" alt=\"\"></p>","more":"<h4 id=\"ELK优化架构\"><a href=\"#ELK优化架构\" class=\"headerlink\" title=\"ELK优化架构\"></a>ELK优化架构</h4><p><img src=\"https://s1.ax1x.com/2020/04/05/Gr9WQg.png\" alt=\"\"></p>\n<h4 id=\"ELK-—-Kafka-VS-Redis\"><a href=\"#ELK-—-Kafka-VS-Redis\" class=\"headerlink\" title=\"ELK — Kafka  VS Redis\"></a>ELK — Kafka  VS Redis</h4><p>  <code>ELK Stack 官网建议使用 Redis 来做消息队列，但是正常建议采用 Kafka。</code></p>\n<table>\n<thead>\n<tr>\n<th>数据丢失</th>\n<th>数据堆积</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1.Redis 队列多用于实时性较高的消息推送，并不保证可靠；</td>\n<td>1.Redis 队列容量取决于机器内存大小，如果超过设置的Max memory，数据就会抛弃；</td>\n</tr>\n<tr>\n<td>2.Kafka保证可靠但有点延时。</td>\n<td>2.Kafka 的堆积能力取决于机器硬盘大小。</td>\n</tr>\n</tbody></table>\n<h4 id=\"ELK部署方式\"><a href=\"#ELK部署方式\" class=\"headerlink\" title=\"ELK部署方式\"></a>ELK部署方式</h4><ol>\n<li>传统分布式部署</li>\n<li>Docker方式部署</li>\n<li>在K8S集群中部署（Helm）</li>\n</ol>"},{"layout":"post","title":"java之深拷贝与浅拷贝","date":"2019-04-17T06:48:00.000Z","comments":1,"_content":"\n\n`浅拷贝`：①对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性值复制一份给新的对象。因为是两份不同的数据，所以对其中一个对象的该成员变量值进行修改，不会影响另一个对象拷贝得到的数据。②对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组、某个类的对象等，那么浅拷贝会进行引用传递，也就是只是将该成员变量的引用值（内存地址）复制一份给新的对象。因为实际上两个对象的该成员变量都指向同一个实例。在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量值。\n<!--more-->\n`深拷贝`：深拷贝对引用数据类型的成员变量的对象图中所有的对象都开辟了内存空间；而浅拷贝只是传递地址指向，新的对象并没有对引用数据类型创建内存空间。\n测试代码如下：[啰里吧嗦，直接查看总结](#jump)\n\n```实体类```\n\n\tpackage cn.edu.nuaa.qjj.domain;\n\n\tpublic class Location implements Cloneable {\n\tprivate int localId;// 区域的编号（0、1....N）\n\tprivate int[] load = new int[3];// 三个时间段的平均负载情况\n\tprivate double ownCapacity;// 实际分配的计算能力，两种情况；有协作和无协作\n\n\tpublic int getLocalId() {\n\t\treturn localId;\n\t}\n\n\t// 实现对象的浅复制\n\t@Override\n\tpublic Location clone() {\n\t\t// TODO Auto-generated method stub\n\t\tLocation loc = null;\n\t\ttry {\n\t\t\tloc = (Location) super.clone();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn loc;\n\t}\n\n\tpublic void setLocalId(int localId) {\n\t\tthis.localId = localId;\n\t}\n\n\tpublic int[] getLoad() {\n\t\treturn load;\n\t}\n\n\tpublic void setLoad(int[] load) {\n\t\tthis.load = load;\n\t}\n\n\tpublic double getOwnCapacity() {\n\t\treturn ownCapacity;\n\t}\n\n\tpublic void setOwnCapacity(double ownCapacity) {\n\t\tthis.ownCapacity = ownCapacity;\n\t}\n\n\t// 不包含设置计算能力的构造方法\n\tpublic Location(int localId, int[] load) {\n\t\tsuper();\n\t\tthis.localId = localId;\n\t\tthis.load = load;\n\t}\n\n\tpublic Location() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n\t}\n\n\n```main测试类```\n\t\n\tpackage cn.edu.nuaa.qjj.util;\n\timport java.util.ArrayList;\n\timport java.util.Arrays;\n\n\timport cn.edu.nuaa.qjj.domain.Location;\n\timport cn.edu.nuaa.qjj.genera.GraphGen;\n\timport cn.edu.nuaa.qjj.genera.LocationGen;\n\timport cn.edu.nuaa.qjj.main.MainSchedule;\n\n\tpublic class SortDemo {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tnew GraphGen().graphGen();// 生成无向图\n\t\tnew LocationGen().locationGen();// 生成区域点的信息\n\t\tArrayList<Location> ll = new ArrayList<Location>();\n\t\t// 实现对象的浅复制，但是对于引用对象数组必须单独copy，因为浅复制没有拷贝引用对象\n\t\tfor (Location l : MainSchedule.loaclList) {\n\t\t\tint[] list = l.getLoad().clone();\n\t\t\tLocation lo = l.clone();\n\t\t\tlo.setLoad(list);\n\t\t\tll.add(lo);\n\t\t}\n\t//\t\tArrayList<Location> ll = MainSchedule.loaclList;\n\t\tfor (Location l : ll) {\n\t\t\tArrays.sort(l.getLoad()); // 把这个区域的3个负载升序排序\n\t\t}\n\t\tfor (Location l : ll) {\n\t\t\tSystem.out.println(l.getLoad()[0] + \",\" + l.getLoad()[1] + \",\" + l.getLoad()[2]);\n\t\t}\n\t\tSystem.out.println(\"没有排序以前的负载情况如下：\");\n\t\tfor (Location lc : MainSchedule.loaclList) {\n\t\t\tSystem.out.println(lc.getLoad()[0] + \",\" + lc.getLoad()[1] + \",\" + lc.getLoad()[2]);\n\t\t}\n\t}\n\n\t}\n\n```结果如下：```\n\t\n\t100,500,500\n\t200,400,600\n\t300,400,800\n\t300,400,600\n\t100,400,500\n\t没有排序以前的负载情况如下：\n\t500,100,500\n\t200,600,400\n\t300,800,400\n\t400,600,300\n\t100,500,400\n\n<span id='jump'>总结：Location对象中包含不是基本数据类型的数组引用类型，在传统的浅clone的情况下是不能完成整个对象的复制的，有两种方法可以解决：一种是直接实现深clone，另一种是直接像我上面的一样在浅clone之后，再单独手动clone引用类型，并手动赋值进去。</span>\n","source":"_posts/java_clone.md","raw":"---\nlayout: post\ntitle: \"java之深拷贝与浅拷贝\"\ndate: 2019-04-17 14:48\ncomments: true\ntags: \n\t- java\n\t\n---\n\n\n`浅拷贝`：①对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性值复制一份给新的对象。因为是两份不同的数据，所以对其中一个对象的该成员变量值进行修改，不会影响另一个对象拷贝得到的数据。②对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组、某个类的对象等，那么浅拷贝会进行引用传递，也就是只是将该成员变量的引用值（内存地址）复制一份给新的对象。因为实际上两个对象的该成员变量都指向同一个实例。在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量值。\n<!--more-->\n`深拷贝`：深拷贝对引用数据类型的成员变量的对象图中所有的对象都开辟了内存空间；而浅拷贝只是传递地址指向，新的对象并没有对引用数据类型创建内存空间。\n测试代码如下：[啰里吧嗦，直接查看总结](#jump)\n\n```实体类```\n\n\tpackage cn.edu.nuaa.qjj.domain;\n\n\tpublic class Location implements Cloneable {\n\tprivate int localId;// 区域的编号（0、1....N）\n\tprivate int[] load = new int[3];// 三个时间段的平均负载情况\n\tprivate double ownCapacity;// 实际分配的计算能力，两种情况；有协作和无协作\n\n\tpublic int getLocalId() {\n\t\treturn localId;\n\t}\n\n\t// 实现对象的浅复制\n\t@Override\n\tpublic Location clone() {\n\t\t// TODO Auto-generated method stub\n\t\tLocation loc = null;\n\t\ttry {\n\t\t\tloc = (Location) super.clone();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn loc;\n\t}\n\n\tpublic void setLocalId(int localId) {\n\t\tthis.localId = localId;\n\t}\n\n\tpublic int[] getLoad() {\n\t\treturn load;\n\t}\n\n\tpublic void setLoad(int[] load) {\n\t\tthis.load = load;\n\t}\n\n\tpublic double getOwnCapacity() {\n\t\treturn ownCapacity;\n\t}\n\n\tpublic void setOwnCapacity(double ownCapacity) {\n\t\tthis.ownCapacity = ownCapacity;\n\t}\n\n\t// 不包含设置计算能力的构造方法\n\tpublic Location(int localId, int[] load) {\n\t\tsuper();\n\t\tthis.localId = localId;\n\t\tthis.load = load;\n\t}\n\n\tpublic Location() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n\t}\n\n\n```main测试类```\n\t\n\tpackage cn.edu.nuaa.qjj.util;\n\timport java.util.ArrayList;\n\timport java.util.Arrays;\n\n\timport cn.edu.nuaa.qjj.domain.Location;\n\timport cn.edu.nuaa.qjj.genera.GraphGen;\n\timport cn.edu.nuaa.qjj.genera.LocationGen;\n\timport cn.edu.nuaa.qjj.main.MainSchedule;\n\n\tpublic class SortDemo {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tnew GraphGen().graphGen();// 生成无向图\n\t\tnew LocationGen().locationGen();// 生成区域点的信息\n\t\tArrayList<Location> ll = new ArrayList<Location>();\n\t\t// 实现对象的浅复制，但是对于引用对象数组必须单独copy，因为浅复制没有拷贝引用对象\n\t\tfor (Location l : MainSchedule.loaclList) {\n\t\t\tint[] list = l.getLoad().clone();\n\t\t\tLocation lo = l.clone();\n\t\t\tlo.setLoad(list);\n\t\t\tll.add(lo);\n\t\t}\n\t//\t\tArrayList<Location> ll = MainSchedule.loaclList;\n\t\tfor (Location l : ll) {\n\t\t\tArrays.sort(l.getLoad()); // 把这个区域的3个负载升序排序\n\t\t}\n\t\tfor (Location l : ll) {\n\t\t\tSystem.out.println(l.getLoad()[0] + \",\" + l.getLoad()[1] + \",\" + l.getLoad()[2]);\n\t\t}\n\t\tSystem.out.println(\"没有排序以前的负载情况如下：\");\n\t\tfor (Location lc : MainSchedule.loaclList) {\n\t\t\tSystem.out.println(lc.getLoad()[0] + \",\" + lc.getLoad()[1] + \",\" + lc.getLoad()[2]);\n\t\t}\n\t}\n\n\t}\n\n```结果如下：```\n\t\n\t100,500,500\n\t200,400,600\n\t300,400,800\n\t300,400,600\n\t100,400,500\n\t没有排序以前的负载情况如下：\n\t500,100,500\n\t200,600,400\n\t300,800,400\n\t400,600,300\n\t100,500,400\n\n<span id='jump'>总结：Location对象中包含不是基本数据类型的数组引用类型，在传统的浅clone的情况下是不能完成整个对象的复制的，有两种方法可以解决：一种是直接实现深clone，另一种是直接像我上面的一样在浅clone之后，再单独手动clone引用类型，并手动赋值进去。</span>\n","slug":"java_clone","published":1,"updated":"2020-04-07T01:08:17.906Z","photos":[],"link":"","_id":"ck8p7vtna0009ahtx5192321j","content":"<p><code>浅拷贝</code>：①对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性值复制一份给新的对象。因为是两份不同的数据，所以对其中一个对象的该成员变量值进行修改，不会影响另一个对象拷贝得到的数据。②对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组、某个类的对象等，那么浅拷贝会进行引用传递，也就是只是将该成员变量的引用值（内存地址）复制一份给新的对象。因为实际上两个对象的该成员变量都指向同一个实例。在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量值。</p>\n<a id=\"more\"></a>\n<p><code>深拷贝</code>：深拷贝对引用数据类型的成员变量的对象图中所有的对象都开辟了内存空间；而浅拷贝只是传递地址指向，新的对象并没有对引用数据类型创建内存空间。<br>测试代码如下：<a href=\"#jump\">啰里吧嗦，直接查看总结</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\tpackage cn.edu.nuaa.qjj.domain;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic class Location implements Cloneable &#123;</span><br><span class=\"line\">\tprivate int localId;&#x2F;&#x2F; 区域的编号（0、1....N）</span><br><span class=\"line\">\tprivate int[] load &#x3D; new int[3];&#x2F;&#x2F; 三个时间段的平均负载情况</span><br><span class=\"line\">\tprivate double ownCapacity;&#x2F;&#x2F; 实际分配的计算能力，两种情况；有协作和无协作</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic int getLocalId() &#123;</span><br><span class=\"line\">\t\treturn localId;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 实现对象的浅复制</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic Location clone() &#123;</span><br><span class=\"line\">\t\t&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class=\"line\">\t\tLocation loc &#x3D; null;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tloc &#x3D; (Location) super.clone();</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn loc;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setLocalId(int localId) &#123;</span><br><span class=\"line\">\t\tthis.localId &#x3D; localId;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic int[] getLoad() &#123;</span><br><span class=\"line\">\t\treturn load;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setLoad(int[] load) &#123;</span><br><span class=\"line\">\t\tthis.load &#x3D; load;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic double getOwnCapacity() &#123;</span><br><span class=\"line\">\t\treturn ownCapacity;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setOwnCapacity(double ownCapacity) &#123;</span><br><span class=\"line\">\t\tthis.ownCapacity &#x3D; ownCapacity;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 不包含设置计算能力的构造方法</span><br><span class=\"line\">\tpublic Location(int localId, int[] load) &#123;</span><br><span class=\"line\">\t\tsuper();</span><br><span class=\"line\">\t\tthis.localId &#x3D; localId;</span><br><span class=\"line\">\t\tthis.load &#x3D; load;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Location() &#123;</span><br><span class=\"line\">\t\t&#x2F;&#x2F; TODO Auto-generated constructor stub</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;main测试类</span><br></pre></td></tr></table></figure>\n\n<pre><code>package cn.edu.nuaa.qjj.util;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\nimport cn.edu.nuaa.qjj.domain.Location;\nimport cn.edu.nuaa.qjj.genera.GraphGen;\nimport cn.edu.nuaa.qjj.genera.LocationGen;\nimport cn.edu.nuaa.qjj.main.MainSchedule;\n\npublic class SortDemo {\n\npublic static void main(String[] args) {\n    // TODO Auto-generated method stub\n    new GraphGen().graphGen();// 生成无向图\n    new LocationGen().locationGen();// 生成区域点的信息\n    ArrayList&lt;Location&gt; ll = new ArrayList&lt;Location&gt;();\n    // 实现对象的浅复制，但是对于引用对象数组必须单独copy，因为浅复制没有拷贝引用对象\n    for (Location l : MainSchedule.loaclList) {\n        int[] list = l.getLoad().clone();\n        Location lo = l.clone();\n        lo.setLoad(list);\n        ll.add(lo);\n    }\n//        ArrayList&lt;Location&gt; ll = MainSchedule.loaclList;\n    for (Location l : ll) {\n        Arrays.sort(l.getLoad()); // 把这个区域的3个负载升序排序\n    }\n    for (Location l : ll) {\n        System.out.println(l.getLoad()[0] + &quot;,&quot; + l.getLoad()[1] + &quot;,&quot; + l.getLoad()[2]);\n    }\n    System.out.println(&quot;没有排序以前的负载情况如下：&quot;);\n    for (Location lc : MainSchedule.loaclList) {\n        System.out.println(lc.getLoad()[0] + &quot;,&quot; + lc.getLoad()[1] + &quot;,&quot; + lc.getLoad()[2]);\n    }\n}\n\n}</code></pre><p><code>结果如下：</code></p>\n<pre><code>100,500,500\n200,400,600\n300,400,800\n300,400,600\n100,400,500\n没有排序以前的负载情况如下：\n500,100,500\n200,600,400\n300,800,400\n400,600,300\n100,500,400</code></pre><p><span id='jump'>总结：Location对象中包含不是基本数据类型的数组引用类型，在传统的浅clone的情况下是不能完成整个对象的复制的，有两种方法可以解决：一种是直接实现深clone，另一种是直接像我上面的一样在浅clone之后，再单独手动clone引用类型，并手动赋值进去。</span></p>\n","site":{"data":{}},"excerpt":"<p><code>浅拷贝</code>：①对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性值复制一份给新的对象。因为是两份不同的数据，所以对其中一个对象的该成员变量值进行修改，不会影响另一个对象拷贝得到的数据。②对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组、某个类的对象等，那么浅拷贝会进行引用传递，也就是只是将该成员变量的引用值（内存地址）复制一份给新的对象。因为实际上两个对象的该成员变量都指向同一个实例。在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量值。</p>","more":"<p><code>深拷贝</code>：深拷贝对引用数据类型的成员变量的对象图中所有的对象都开辟了内存空间；而浅拷贝只是传递地址指向，新的对象并没有对引用数据类型创建内存空间。<br>测试代码如下：<a href=\"#jump\">啰里吧嗦，直接查看总结</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\tpackage cn.edu.nuaa.qjj.domain;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic class Location implements Cloneable &#123;</span><br><span class=\"line\">\tprivate int localId;&#x2F;&#x2F; 区域的编号（0、1....N）</span><br><span class=\"line\">\tprivate int[] load &#x3D; new int[3];&#x2F;&#x2F; 三个时间段的平均负载情况</span><br><span class=\"line\">\tprivate double ownCapacity;&#x2F;&#x2F; 实际分配的计算能力，两种情况；有协作和无协作</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic int getLocalId() &#123;</span><br><span class=\"line\">\t\treturn localId;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 实现对象的浅复制</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic Location clone() &#123;</span><br><span class=\"line\">\t\t&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class=\"line\">\t\tLocation loc &#x3D; null;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tloc &#x3D; (Location) super.clone();</span><br><span class=\"line\">\t\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn loc;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setLocalId(int localId) &#123;</span><br><span class=\"line\">\t\tthis.localId &#x3D; localId;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic int[] getLoad() &#123;</span><br><span class=\"line\">\t\treturn load;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setLoad(int[] load) &#123;</span><br><span class=\"line\">\t\tthis.load &#x3D; load;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic double getOwnCapacity() &#123;</span><br><span class=\"line\">\t\treturn ownCapacity;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic void setOwnCapacity(double ownCapacity) &#123;</span><br><span class=\"line\">\t\tthis.ownCapacity &#x3D; ownCapacity;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 不包含设置计算能力的构造方法</span><br><span class=\"line\">\tpublic Location(int localId, int[] load) &#123;</span><br><span class=\"line\">\t\tsuper();</span><br><span class=\"line\">\t\tthis.localId &#x3D; localId;</span><br><span class=\"line\">\t\tthis.load &#x3D; load;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic Location() &#123;</span><br><span class=\"line\">\t\t&#x2F;&#x2F; TODO Auto-generated constructor stub</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;main测试类</span><br></pre></td></tr></table></figure>\n\n<pre><code>package cn.edu.nuaa.qjj.util;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\nimport cn.edu.nuaa.qjj.domain.Location;\nimport cn.edu.nuaa.qjj.genera.GraphGen;\nimport cn.edu.nuaa.qjj.genera.LocationGen;\nimport cn.edu.nuaa.qjj.main.MainSchedule;\n\npublic class SortDemo {\n\npublic static void main(String[] args) {\n    // TODO Auto-generated method stub\n    new GraphGen().graphGen();// 生成无向图\n    new LocationGen().locationGen();// 生成区域点的信息\n    ArrayList&lt;Location&gt; ll = new ArrayList&lt;Location&gt;();\n    // 实现对象的浅复制，但是对于引用对象数组必须单独copy，因为浅复制没有拷贝引用对象\n    for (Location l : MainSchedule.loaclList) {\n        int[] list = l.getLoad().clone();\n        Location lo = l.clone();\n        lo.setLoad(list);\n        ll.add(lo);\n    }\n//        ArrayList&lt;Location&gt; ll = MainSchedule.loaclList;\n    for (Location l : ll) {\n        Arrays.sort(l.getLoad()); // 把这个区域的3个负载升序排序\n    }\n    for (Location l : ll) {\n        System.out.println(l.getLoad()[0] + &quot;,&quot; + l.getLoad()[1] + &quot;,&quot; + l.getLoad()[2]);\n    }\n    System.out.println(&quot;没有排序以前的负载情况如下：&quot;);\n    for (Location lc : MainSchedule.loaclList) {\n        System.out.println(lc.getLoad()[0] + &quot;,&quot; + lc.getLoad()[1] + &quot;,&quot; + lc.getLoad()[2]);\n    }\n}\n\n}</code></pre><p><code>结果如下：</code></p>\n<pre><code>100,500,500\n200,400,600\n300,400,800\n300,400,600\n100,400,500\n没有排序以前的负载情况如下：\n500,100,500\n200,600,400\n300,800,400\n400,600,300\n100,500,400</code></pre><p><span id='jump'>总结：Location对象中包含不是基本数据类型的数组引用类型，在传统的浅clone的情况下是不能完成整个对象的复制的，有两种方法可以解决：一种是直接实现深clone，另一种是直接像我上面的一样在浅clone之后，再单独手动clone引用类型，并手动赋值进去。</span></p>"},{"layout":"post","title":"小游戏试玩","date":"2020-04-06T12:28:00.000Z","comments":1,"_content":"\n[cxk打篮球，点击试玩](http://www.planb.org.cn/game)\n\n","source":"_posts/game.md","raw":"---\nlayout: post\ntitle: \"小游戏试玩\"\ndate: 2020-04-06 20:28\ncomments: true\ntags: \n\t- game\n\t\n---\n\n[cxk打篮球，点击试玩](http://www.planb.org.cn/game)\n\n","slug":"game","published":1,"updated":"2020-04-07T06:27:09.872Z","_id":"ck8p7vtnc000bahtxam4t2kb2","photos":[],"link":"","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p><a href=\"http://www.planb.org.cn/game\" target=\"_blank\" rel=\"noopener\">cxk打篮球，点击试玩</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.planb.org.cn/game\" target=\"_blank\" rel=\"noopener\">cxk打篮球，点击试玩</a></p>\n"},{"layout":"post","title":"瞥见Git中的hooks","date":"2020-04-06T08:48:00.000Z","comments":1,"_content":"\n\n\n**需求：当有客户端`git push`内容到服务端时候，触发`hooks`操作，将提交的内容自动部署到`nginx`的访问的路径下，这样就可以实现web提交后 的自动部署（具体代码见文章最后截图）。**\n\n和其它版本控制系统一样，Git 能在特定的重要动作发生时触发自定义脚本。有两组这样的钩子(他的作用类似于数据库中的trigger，可以把trigger定义在各种操作上，比如增查改删等，当有上述行为发生的时候，就可以自定义给与相应的一些动作，和这无疑给数据库的带来了极大的灵活性)\n\n- 客户端的和服务器端的。客户端钩子由诸如提交和合并这样的操作所调用\n- 服务器端钩子作用于诸如接收被推送的提交这样的联网操作。你可以随心所欲地运用这些钩子。\n\n<!--more-->\n\n### 钩子的位置\n\n​\t钩子都被存储在 Git 目录下的 `hooks` 子目录中。也即绝大部分项目中的 `.git/hooks` 。当你用 `git init` 初始化一个新版本库时，Git 默认会在这个目录中放置一些示例脚本。这些脚本除了本身可以被调用外，它们还透露了被触发时所传入的参数。所有的示例都是 shell 脚本，其中一些还混杂了 Perl 代码，不过，任何正确命名的可执行脚本都可以正常使用。你可以用 Ruby 或 Python，或任何你熟悉的语言编写它们。\n​\t这些示例的名字都是以 `.sample` 结尾，如果你想启用它们，得先移除这个后缀。\n\n### 客户端钩子\n\n1. 提交工作流钩子\n\n   前四个钩子涉及提交的过程。\n\n   `pre-commit` 钩子在键入提交信息前运行。 它用于检查即将提交的快照，例如，检查是否有所遗漏，确保测试运行，以及核查代码。 如果该钩子以非零值退出，Git 将放弃此次提交，不过你可以用 ``git commit --no-verify`` 来绕过这个环节。 你可以利用该钩子，来检查代码风格是否一致（运行类似 `lint` 的程序）、尾随空白字符是否存在（自带的钩子就是这么做的），或新方法的文档是否适当。\n\n   `prepare-commit-msg` 钩子在启动提交信息编辑器之前，默认信息被创建之后运行。 它允许你编辑提交者所看到的默认信息。 该钩子接收一些选项：存有当前提交信息的文件的路径、提交类型和修补提交的提交的 SHA-1 校验。 它对一般的提交来说并没有什么用；然而对那些会自动产生默认信息的提交，如提交信息模板、合并提交、压缩提交和修订提交等非常实用。 你可以结合提交模板来使用它，动态地插入信息。\n\n   `commit-msg` 钩子接收一个参数，此参数即上文提到的，存有当前提交信息的临时文件的路径。 如果该钩子脚本以非零值退出，Git 将放弃提交，因此，可以用来在提交通过前验证项目状态或提交信息。 在本章的最后一节，我们将展示如何使用该钩子来核对提交信息是否遵循指定的模板。\n\n   `post-commit` 钩子在整个提交过程完成后运行。 它不接收任何参数，但你可以很容易地通过运行 `git log -1 HEAD` 来获得最后一次的提交信息。 该钩子一般用于通知之类的事情。\n\n2. #### 电子邮件工作流钩子\n\n   你可以给电子邮件工作流设置三个客户端钩子。 它们都是由 `git am` 命令调用的，因此如果你没有在你的工作流中用到这个命令，可以跳到下一节。 如果你需要通过电子邮件接收由 `git format-patch` 产生的补丁，这些钩子也许用得上。\n\n   第一个运行的钩子是 `applypatch-msg` 。 它接收单个参数：包含请求合并信息的临时文件的名字。 如果脚本返回非零值，Git 将放弃该补丁。 你可以用该脚本来确保提交信息符合格式，或直接用脚本修正格式错误。\n\n   下一个在 `git am` 运行期间被调用的是 `pre-applypatch` 。 有些难以理解的是，它正好运行于应用补丁 *之后*，产生提交之前，所以你可以用它在提交前检查快照。 你可以用这个脚本运行测试或检查工作区。 如果有什么遗漏，或测试未能通过，脚本会以非零值退出，中断 `git am` 的运行，这样补丁就不会被提交。\n\n   `post-applypatch` 运行于提交产生之后，是在 `git am` 运行期间最后被调用的钩子。 你可以用它把结果通知给一个小组或所拉取的补丁的作者。 但你没办法用它停止打补丁的过程。\n\n3. #### 其它客户端钩子\n\n   `pre-rebase` 钩子运行于变基之前，以非零值退出可以中止变基的过程。 你可以使用这个钩子来禁止对已经推送的提交变基。 Git 自带的 `pre-rebase` 钩子示例就是这么做的，不过它所做的一些假设可能与你的工作流程不匹配。\n\n   `post-rewrite` 钩子被那些会替换提交记录的命令调用，比如 `git commit --amend` 和 `git rebase`（不过不包括 `git filter-branch`）。 它唯一的参数是触发重写的命令名，同时从标准输入中接受一系列重写的提交记录。 这个钩子的用途很大程度上跟 `post-checkout` 和 `post-merge` 差不多。\n\n   在 `git checkout` 成功运行后，`post-checkout` 钩子会被调用。你可以根据你的项目环境用它调整你的工作目录。 其中包括放入大的二进制文件、自动生成文档或进行其他类似这样的操作。\n\n   在 `git merge` 成功运行后，`post-merge` 钩子会被调用。 你可以用它恢复 Git 无法跟踪的工作区数据，比如权限数据。 这个钩子也可以用来验证某些在 Git 控制之外的文件是否存在，这样你就能在工作区改变时，把这些文件复制进来。\n\n   `pre-push` 钩子会在 `git push` 运行期间， 更新了远程引用但尚未传送对象时被调用。 它接受远程分支的名字和位置作为参数，同时从标准输入中读取一系列待更新的引用。 你可以在推送开始之前，用它验证对引用的更新操作（一个非零的退出码将终止推送过程）。\n\n   Git 的一些日常操作在运行时，偶尔会调用 `git gc --auto` 进行垃圾回收。 `pre-auto-gc` 钩子会在垃圾回收开始之前被调用，可以用它来提醒你现在要回收垃圾了，或者依情形判断是否要中断回收。\n\n### 服务端钩子\n\n​\t除了客户端钩子，作为系统管理员，你还可以使用若干服务器端的钩子对项目强制执行各种类型的策略。这些钩子脚本在推送到服务器之前和之后运行。推送到服务器前运行的钩子可以在任何时候以非零值退出，拒绝推送并给客户端返回错误消息，还可以依你所想设置足够复杂的推送策略。\n\n#### `pre-receive`\n\n​\t处理来自客户端的推送操作时，最先被调用的脚本是 `pre-receive`。 它从标准输入获取一系列被推送的引用。如果它以非零值退出，所有的推送内容都不会被接受。 你可以用这个钩子阻止对引用进行非快进（non-fast-forward）的更新，或者对该推送所修改的所有引用和文件进行访问控制。\n\n#### `update`\n\n​\t`update` 脚本和 `pre-receive` 脚本十分类似，不同之处在于它会为每一个准备更新的分支各运行一次。 假如推送者同时向多个分支推送内容，`pre-receive` 只运行一次，相比之下 `update` 则会为每一个被推送的分支各运行一次。 它不会从标准输入读取内容，而是接受三个参数：引用的名字（分支），推送前的引用指向的内容的 SHA-1 值，以及用户准备推送的内容的 SHA-1 值。 如果 update 脚本以非零值退出，只有相应的那一个引用会被拒绝；其余的依然会被更新。\n\n#### `post-receive`\n\n​\t`post-receive` 挂钩在整个过程完结以后运行，可以用来更新其他系统服务或者通知用户。 它接受与 `pre-receive` 相同的标准输入数据。 它的用途包括给某个邮件列表发信，通知持续集成（continous integration）的服务器， 或者更新问题追踪系统（ticket-tracking system） —— 甚至可以通过分析提交信息来决定某个问题（ticket）是否应该被开启，修改或者关闭。 该脚本无法终止推送进程，不过客户端在它结束运行之前将保持连接状态， 所以如果你想做其他操作需谨慎使用它，因为它将耗费你很长的一段时间。\n\n​\t总结：其中比较常见的钩子服务器端的钩子`post-receive`、`pre-receive`。下面给出今天的实际使用场景的截图。\n\n![](https://s1.ax1x.com/2020/04/06/GyKddP.png)\n\n​\t其中实现需求post-receive钩子的代码如下：\n\n![](https://s1.ax1x.com/2020/04/06/GyMMOs.png)","source":"_posts/Git-hooks.md","raw":"---\nlayout: post\ntitle: \"瞥见Git中的hooks\"\ndate: 2020-04-06 16:48\ncomments: true\ntags: \n\t- git\n\t\n---\n\n\n\n**需求：当有客户端`git push`内容到服务端时候，触发`hooks`操作，将提交的内容自动部署到`nginx`的访问的路径下，这样就可以实现web提交后 的自动部署（具体代码见文章最后截图）。**\n\n和其它版本控制系统一样，Git 能在特定的重要动作发生时触发自定义脚本。有两组这样的钩子(他的作用类似于数据库中的trigger，可以把trigger定义在各种操作上，比如增查改删等，当有上述行为发生的时候，就可以自定义给与相应的一些动作，和这无疑给数据库的带来了极大的灵活性)\n\n- 客户端的和服务器端的。客户端钩子由诸如提交和合并这样的操作所调用\n- 服务器端钩子作用于诸如接收被推送的提交这样的联网操作。你可以随心所欲地运用这些钩子。\n\n<!--more-->\n\n### 钩子的位置\n\n​\t钩子都被存储在 Git 目录下的 `hooks` 子目录中。也即绝大部分项目中的 `.git/hooks` 。当你用 `git init` 初始化一个新版本库时，Git 默认会在这个目录中放置一些示例脚本。这些脚本除了本身可以被调用外，它们还透露了被触发时所传入的参数。所有的示例都是 shell 脚本，其中一些还混杂了 Perl 代码，不过，任何正确命名的可执行脚本都可以正常使用。你可以用 Ruby 或 Python，或任何你熟悉的语言编写它们。\n​\t这些示例的名字都是以 `.sample` 结尾，如果你想启用它们，得先移除这个后缀。\n\n### 客户端钩子\n\n1. 提交工作流钩子\n\n   前四个钩子涉及提交的过程。\n\n   `pre-commit` 钩子在键入提交信息前运行。 它用于检查即将提交的快照，例如，检查是否有所遗漏，确保测试运行，以及核查代码。 如果该钩子以非零值退出，Git 将放弃此次提交，不过你可以用 ``git commit --no-verify`` 来绕过这个环节。 你可以利用该钩子，来检查代码风格是否一致（运行类似 `lint` 的程序）、尾随空白字符是否存在（自带的钩子就是这么做的），或新方法的文档是否适当。\n\n   `prepare-commit-msg` 钩子在启动提交信息编辑器之前，默认信息被创建之后运行。 它允许你编辑提交者所看到的默认信息。 该钩子接收一些选项：存有当前提交信息的文件的路径、提交类型和修补提交的提交的 SHA-1 校验。 它对一般的提交来说并没有什么用；然而对那些会自动产生默认信息的提交，如提交信息模板、合并提交、压缩提交和修订提交等非常实用。 你可以结合提交模板来使用它，动态地插入信息。\n\n   `commit-msg` 钩子接收一个参数，此参数即上文提到的，存有当前提交信息的临时文件的路径。 如果该钩子脚本以非零值退出，Git 将放弃提交，因此，可以用来在提交通过前验证项目状态或提交信息。 在本章的最后一节，我们将展示如何使用该钩子来核对提交信息是否遵循指定的模板。\n\n   `post-commit` 钩子在整个提交过程完成后运行。 它不接收任何参数，但你可以很容易地通过运行 `git log -1 HEAD` 来获得最后一次的提交信息。 该钩子一般用于通知之类的事情。\n\n2. #### 电子邮件工作流钩子\n\n   你可以给电子邮件工作流设置三个客户端钩子。 它们都是由 `git am` 命令调用的，因此如果你没有在你的工作流中用到这个命令，可以跳到下一节。 如果你需要通过电子邮件接收由 `git format-patch` 产生的补丁，这些钩子也许用得上。\n\n   第一个运行的钩子是 `applypatch-msg` 。 它接收单个参数：包含请求合并信息的临时文件的名字。 如果脚本返回非零值，Git 将放弃该补丁。 你可以用该脚本来确保提交信息符合格式，或直接用脚本修正格式错误。\n\n   下一个在 `git am` 运行期间被调用的是 `pre-applypatch` 。 有些难以理解的是，它正好运行于应用补丁 *之后*，产生提交之前，所以你可以用它在提交前检查快照。 你可以用这个脚本运行测试或检查工作区。 如果有什么遗漏，或测试未能通过，脚本会以非零值退出，中断 `git am` 的运行，这样补丁就不会被提交。\n\n   `post-applypatch` 运行于提交产生之后，是在 `git am` 运行期间最后被调用的钩子。 你可以用它把结果通知给一个小组或所拉取的补丁的作者。 但你没办法用它停止打补丁的过程。\n\n3. #### 其它客户端钩子\n\n   `pre-rebase` 钩子运行于变基之前，以非零值退出可以中止变基的过程。 你可以使用这个钩子来禁止对已经推送的提交变基。 Git 自带的 `pre-rebase` 钩子示例就是这么做的，不过它所做的一些假设可能与你的工作流程不匹配。\n\n   `post-rewrite` 钩子被那些会替换提交记录的命令调用，比如 `git commit --amend` 和 `git rebase`（不过不包括 `git filter-branch`）。 它唯一的参数是触发重写的命令名，同时从标准输入中接受一系列重写的提交记录。 这个钩子的用途很大程度上跟 `post-checkout` 和 `post-merge` 差不多。\n\n   在 `git checkout` 成功运行后，`post-checkout` 钩子会被调用。你可以根据你的项目环境用它调整你的工作目录。 其中包括放入大的二进制文件、自动生成文档或进行其他类似这样的操作。\n\n   在 `git merge` 成功运行后，`post-merge` 钩子会被调用。 你可以用它恢复 Git 无法跟踪的工作区数据，比如权限数据。 这个钩子也可以用来验证某些在 Git 控制之外的文件是否存在，这样你就能在工作区改变时，把这些文件复制进来。\n\n   `pre-push` 钩子会在 `git push` 运行期间， 更新了远程引用但尚未传送对象时被调用。 它接受远程分支的名字和位置作为参数，同时从标准输入中读取一系列待更新的引用。 你可以在推送开始之前，用它验证对引用的更新操作（一个非零的退出码将终止推送过程）。\n\n   Git 的一些日常操作在运行时，偶尔会调用 `git gc --auto` 进行垃圾回收。 `pre-auto-gc` 钩子会在垃圾回收开始之前被调用，可以用它来提醒你现在要回收垃圾了，或者依情形判断是否要中断回收。\n\n### 服务端钩子\n\n​\t除了客户端钩子，作为系统管理员，你还可以使用若干服务器端的钩子对项目强制执行各种类型的策略。这些钩子脚本在推送到服务器之前和之后运行。推送到服务器前运行的钩子可以在任何时候以非零值退出，拒绝推送并给客户端返回错误消息，还可以依你所想设置足够复杂的推送策略。\n\n#### `pre-receive`\n\n​\t处理来自客户端的推送操作时，最先被调用的脚本是 `pre-receive`。 它从标准输入获取一系列被推送的引用。如果它以非零值退出，所有的推送内容都不会被接受。 你可以用这个钩子阻止对引用进行非快进（non-fast-forward）的更新，或者对该推送所修改的所有引用和文件进行访问控制。\n\n#### `update`\n\n​\t`update` 脚本和 `pre-receive` 脚本十分类似，不同之处在于它会为每一个准备更新的分支各运行一次。 假如推送者同时向多个分支推送内容，`pre-receive` 只运行一次，相比之下 `update` 则会为每一个被推送的分支各运行一次。 它不会从标准输入读取内容，而是接受三个参数：引用的名字（分支），推送前的引用指向的内容的 SHA-1 值，以及用户准备推送的内容的 SHA-1 值。 如果 update 脚本以非零值退出，只有相应的那一个引用会被拒绝；其余的依然会被更新。\n\n#### `post-receive`\n\n​\t`post-receive` 挂钩在整个过程完结以后运行，可以用来更新其他系统服务或者通知用户。 它接受与 `pre-receive` 相同的标准输入数据。 它的用途包括给某个邮件列表发信，通知持续集成（continous integration）的服务器， 或者更新问题追踪系统（ticket-tracking system） —— 甚至可以通过分析提交信息来决定某个问题（ticket）是否应该被开启，修改或者关闭。 该脚本无法终止推送进程，不过客户端在它结束运行之前将保持连接状态， 所以如果你想做其他操作需谨慎使用它，因为它将耗费你很长的一段时间。\n\n​\t总结：其中比较常见的钩子服务器端的钩子`post-receive`、`pre-receive`。下面给出今天的实际使用场景的截图。\n\n![](https://s1.ax1x.com/2020/04/06/GyKddP.png)\n\n​\t其中实现需求post-receive钩子的代码如下：\n\n![](https://s1.ax1x.com/2020/04/06/GyMMOs.png)","slug":"Git-hooks","published":1,"updated":"2020-04-06T09:31:35.803Z","photos":[],"link":"","_id":"ck8p7vtnm000sahtx3mcjevzq","content":"<p><strong>需求：当有客户端<code>git push</code>内容到服务端时候，触发<code>hooks</code>操作，将提交的内容自动部署到<code>nginx</code>的访问的路径下，这样就可以实现web提交后 的自动部署（具体代码见文章最后截图）。</strong></p>\n<p>和其它版本控制系统一样，Git 能在特定的重要动作发生时触发自定义脚本。有两组这样的钩子(他的作用类似于数据库中的trigger，可以把trigger定义在各种操作上，比如增查改删等，当有上述行为发生的时候，就可以自定义给与相应的一些动作，和这无疑给数据库的带来了极大的灵活性)</p>\n<ul>\n<li>客户端的和服务器端的。客户端钩子由诸如提交和合并这样的操作所调用</li>\n<li>服务器端钩子作用于诸如接收被推送的提交这样的联网操作。你可以随心所欲地运用这些钩子。</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"钩子的位置\"><a href=\"#钩子的位置\" class=\"headerlink\" title=\"钩子的位置\"></a>钩子的位置</h3><p>​    钩子都被存储在 Git 目录下的 <code>hooks</code> 子目录中。也即绝大部分项目中的 <code>.git/hooks</code> 。当你用 <code>git init</code> 初始化一个新版本库时，Git 默认会在这个目录中放置一些示例脚本。这些脚本除了本身可以被调用外，它们还透露了被触发时所传入的参数。所有的示例都是 shell 脚本，其中一些还混杂了 Perl 代码，不过，任何正确命名的可执行脚本都可以正常使用。你可以用 Ruby 或 Python，或任何你熟悉的语言编写它们。<br>​    这些示例的名字都是以 <code>.sample</code> 结尾，如果你想启用它们，得先移除这个后缀。</p>\n<h3 id=\"客户端钩子\"><a href=\"#客户端钩子\" class=\"headerlink\" title=\"客户端钩子\"></a>客户端钩子</h3><ol>\n<li><p>提交工作流钩子</p>\n<p>前四个钩子涉及提交的过程。</p>\n<p><code>pre-commit</code> 钩子在键入提交信息前运行。 它用于检查即将提交的快照，例如，检查是否有所遗漏，确保测试运行，以及核查代码。 如果该钩子以非零值退出，Git 将放弃此次提交，不过你可以用 <code>git commit --no-verify</code> 来绕过这个环节。 你可以利用该钩子，来检查代码风格是否一致（运行类似 <code>lint</code> 的程序）、尾随空白字符是否存在（自带的钩子就是这么做的），或新方法的文档是否适当。</p>\n<p><code>prepare-commit-msg</code> 钩子在启动提交信息编辑器之前，默认信息被创建之后运行。 它允许你编辑提交者所看到的默认信息。 该钩子接收一些选项：存有当前提交信息的文件的路径、提交类型和修补提交的提交的 SHA-1 校验。 它对一般的提交来说并没有什么用；然而对那些会自动产生默认信息的提交，如提交信息模板、合并提交、压缩提交和修订提交等非常实用。 你可以结合提交模板来使用它，动态地插入信息。</p>\n<p><code>commit-msg</code> 钩子接收一个参数，此参数即上文提到的，存有当前提交信息的临时文件的路径。 如果该钩子脚本以非零值退出，Git 将放弃提交，因此，可以用来在提交通过前验证项目状态或提交信息。 在本章的最后一节，我们将展示如何使用该钩子来核对提交信息是否遵循指定的模板。</p>\n<p><code>post-commit</code> 钩子在整个提交过程完成后运行。 它不接收任何参数，但你可以很容易地通过运行 <code>git log -1 HEAD</code> 来获得最后一次的提交信息。 该钩子一般用于通知之类的事情。</p>\n</li>\n<li><h4 id=\"电子邮件工作流钩子\"><a href=\"#电子邮件工作流钩子\" class=\"headerlink\" title=\"电子邮件工作流钩子\"></a>电子邮件工作流钩子</h4><p>你可以给电子邮件工作流设置三个客户端钩子。 它们都是由 <code>git am</code> 命令调用的，因此如果你没有在你的工作流中用到这个命令，可以跳到下一节。 如果你需要通过电子邮件接收由 <code>git format-patch</code> 产生的补丁，这些钩子也许用得上。</p>\n<p>第一个运行的钩子是 <code>applypatch-msg</code> 。 它接收单个参数：包含请求合并信息的临时文件的名字。 如果脚本返回非零值，Git 将放弃该补丁。 你可以用该脚本来确保提交信息符合格式，或直接用脚本修正格式错误。</p>\n<p>下一个在 <code>git am</code> 运行期间被调用的是 <code>pre-applypatch</code> 。 有些难以理解的是，它正好运行于应用补丁 <em>之后</em>，产生提交之前，所以你可以用它在提交前检查快照。 你可以用这个脚本运行测试或检查工作区。 如果有什么遗漏，或测试未能通过，脚本会以非零值退出，中断 <code>git am</code> 的运行，这样补丁就不会被提交。</p>\n<p><code>post-applypatch</code> 运行于提交产生之后，是在 <code>git am</code> 运行期间最后被调用的钩子。 你可以用它把结果通知给一个小组或所拉取的补丁的作者。 但你没办法用它停止打补丁的过程。</p>\n</li>\n<li><h4 id=\"其它客户端钩子\"><a href=\"#其它客户端钩子\" class=\"headerlink\" title=\"其它客户端钩子\"></a>其它客户端钩子</h4><p><code>pre-rebase</code> 钩子运行于变基之前，以非零值退出可以中止变基的过程。 你可以使用这个钩子来禁止对已经推送的提交变基。 Git 自带的 <code>pre-rebase</code> 钩子示例就是这么做的，不过它所做的一些假设可能与你的工作流程不匹配。</p>\n<p><code>post-rewrite</code> 钩子被那些会替换提交记录的命令调用，比如 <code>git commit --amend</code> 和 <code>git rebase</code>（不过不包括 <code>git filter-branch</code>）。 它唯一的参数是触发重写的命令名，同时从标准输入中接受一系列重写的提交记录。 这个钩子的用途很大程度上跟 <code>post-checkout</code> 和 <code>post-merge</code> 差不多。</p>\n<p>在 <code>git checkout</code> 成功运行后，<code>post-checkout</code> 钩子会被调用。你可以根据你的项目环境用它调整你的工作目录。 其中包括放入大的二进制文件、自动生成文档或进行其他类似这样的操作。</p>\n<p>在 <code>git merge</code> 成功运行后，<code>post-merge</code> 钩子会被调用。 你可以用它恢复 Git 无法跟踪的工作区数据，比如权限数据。 这个钩子也可以用来验证某些在 Git 控制之外的文件是否存在，这样你就能在工作区改变时，把这些文件复制进来。</p>\n<p><code>pre-push</code> 钩子会在 <code>git push</code> 运行期间， 更新了远程引用但尚未传送对象时被调用。 它接受远程分支的名字和位置作为参数，同时从标准输入中读取一系列待更新的引用。 你可以在推送开始之前，用它验证对引用的更新操作（一个非零的退出码将终止推送过程）。</p>\n<p>Git 的一些日常操作在运行时，偶尔会调用 <code>git gc --auto</code> 进行垃圾回收。 <code>pre-auto-gc</code> 钩子会在垃圾回收开始之前被调用，可以用它来提醒你现在要回收垃圾了，或者依情形判断是否要中断回收。</p>\n</li>\n</ol>\n<h3 id=\"服务端钩子\"><a href=\"#服务端钩子\" class=\"headerlink\" title=\"服务端钩子\"></a>服务端钩子</h3><p>​    除了客户端钩子，作为系统管理员，你还可以使用若干服务器端的钩子对项目强制执行各种类型的策略。这些钩子脚本在推送到服务器之前和之后运行。推送到服务器前运行的钩子可以在任何时候以非零值退出，拒绝推送并给客户端返回错误消息，还可以依你所想设置足够复杂的推送策略。</p>\n<h4 id=\"pre-receive\"><a href=\"#pre-receive\" class=\"headerlink\" title=\"pre-receive\"></a><code>pre-receive</code></h4><p>​    处理来自客户端的推送操作时，最先被调用的脚本是 <code>pre-receive</code>。 它从标准输入获取一系列被推送的引用。如果它以非零值退出，所有的推送内容都不会被接受。 你可以用这个钩子阻止对引用进行非快进（non-fast-forward）的更新，或者对该推送所修改的所有引用和文件进行访问控制。</p>\n<h4 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"update\"></a><code>update</code></h4><p>​    <code>update</code> 脚本和 <code>pre-receive</code> 脚本十分类似，不同之处在于它会为每一个准备更新的分支各运行一次。 假如推送者同时向多个分支推送内容，<code>pre-receive</code> 只运行一次，相比之下 <code>update</code> 则会为每一个被推送的分支各运行一次。 它不会从标准输入读取内容，而是接受三个参数：引用的名字（分支），推送前的引用指向的内容的 SHA-1 值，以及用户准备推送的内容的 SHA-1 值。 如果 update 脚本以非零值退出，只有相应的那一个引用会被拒绝；其余的依然会被更新。</p>\n<h4 id=\"post-receive\"><a href=\"#post-receive\" class=\"headerlink\" title=\"post-receive\"></a><code>post-receive</code></h4><p>​    <code>post-receive</code> 挂钩在整个过程完结以后运行，可以用来更新其他系统服务或者通知用户。 它接受与 <code>pre-receive</code> 相同的标准输入数据。 它的用途包括给某个邮件列表发信，通知持续集成（continous integration）的服务器， 或者更新问题追踪系统（ticket-tracking system） —— 甚至可以通过分析提交信息来决定某个问题（ticket）是否应该被开启，修改或者关闭。 该脚本无法终止推送进程，不过客户端在它结束运行之前将保持连接状态， 所以如果你想做其他操作需谨慎使用它，因为它将耗费你很长的一段时间。</p>\n<p>​    总结：其中比较常见的钩子服务器端的钩子<code>post-receive</code>、<code>pre-receive</code>。下面给出今天的实际使用场景的截图。</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/06/GyKddP.png\" alt=\"\"></p>\n<p>​    其中实现需求post-receive钩子的代码如下：</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/06/GyMMOs.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p><strong>需求：当有客户端<code>git push</code>内容到服务端时候，触发<code>hooks</code>操作，将提交的内容自动部署到<code>nginx</code>的访问的路径下，这样就可以实现web提交后 的自动部署（具体代码见文章最后截图）。</strong></p>\n<p>和其它版本控制系统一样，Git 能在特定的重要动作发生时触发自定义脚本。有两组这样的钩子(他的作用类似于数据库中的trigger，可以把trigger定义在各种操作上，比如增查改删等，当有上述行为发生的时候，就可以自定义给与相应的一些动作，和这无疑给数据库的带来了极大的灵活性)</p>\n<ul>\n<li>客户端的和服务器端的。客户端钩子由诸如提交和合并这样的操作所调用</li>\n<li>服务器端钩子作用于诸如接收被推送的提交这样的联网操作。你可以随心所欲地运用这些钩子。</li>\n</ul>","more":"<h3 id=\"钩子的位置\"><a href=\"#钩子的位置\" class=\"headerlink\" title=\"钩子的位置\"></a>钩子的位置</h3><p>​    钩子都被存储在 Git 目录下的 <code>hooks</code> 子目录中。也即绝大部分项目中的 <code>.git/hooks</code> 。当你用 <code>git init</code> 初始化一个新版本库时，Git 默认会在这个目录中放置一些示例脚本。这些脚本除了本身可以被调用外，它们还透露了被触发时所传入的参数。所有的示例都是 shell 脚本，其中一些还混杂了 Perl 代码，不过，任何正确命名的可执行脚本都可以正常使用。你可以用 Ruby 或 Python，或任何你熟悉的语言编写它们。<br>​    这些示例的名字都是以 <code>.sample</code> 结尾，如果你想启用它们，得先移除这个后缀。</p>\n<h3 id=\"客户端钩子\"><a href=\"#客户端钩子\" class=\"headerlink\" title=\"客户端钩子\"></a>客户端钩子</h3><ol>\n<li><p>提交工作流钩子</p>\n<p>前四个钩子涉及提交的过程。</p>\n<p><code>pre-commit</code> 钩子在键入提交信息前运行。 它用于检查即将提交的快照，例如，检查是否有所遗漏，确保测试运行，以及核查代码。 如果该钩子以非零值退出，Git 将放弃此次提交，不过你可以用 <code>git commit --no-verify</code> 来绕过这个环节。 你可以利用该钩子，来检查代码风格是否一致（运行类似 <code>lint</code> 的程序）、尾随空白字符是否存在（自带的钩子就是这么做的），或新方法的文档是否适当。</p>\n<p><code>prepare-commit-msg</code> 钩子在启动提交信息编辑器之前，默认信息被创建之后运行。 它允许你编辑提交者所看到的默认信息。 该钩子接收一些选项：存有当前提交信息的文件的路径、提交类型和修补提交的提交的 SHA-1 校验。 它对一般的提交来说并没有什么用；然而对那些会自动产生默认信息的提交，如提交信息模板、合并提交、压缩提交和修订提交等非常实用。 你可以结合提交模板来使用它，动态地插入信息。</p>\n<p><code>commit-msg</code> 钩子接收一个参数，此参数即上文提到的，存有当前提交信息的临时文件的路径。 如果该钩子脚本以非零值退出，Git 将放弃提交，因此，可以用来在提交通过前验证项目状态或提交信息。 在本章的最后一节，我们将展示如何使用该钩子来核对提交信息是否遵循指定的模板。</p>\n<p><code>post-commit</code> 钩子在整个提交过程完成后运行。 它不接收任何参数，但你可以很容易地通过运行 <code>git log -1 HEAD</code> 来获得最后一次的提交信息。 该钩子一般用于通知之类的事情。</p>\n</li>\n<li><h4 id=\"电子邮件工作流钩子\"><a href=\"#电子邮件工作流钩子\" class=\"headerlink\" title=\"电子邮件工作流钩子\"></a>电子邮件工作流钩子</h4><p>你可以给电子邮件工作流设置三个客户端钩子。 它们都是由 <code>git am</code> 命令调用的，因此如果你没有在你的工作流中用到这个命令，可以跳到下一节。 如果你需要通过电子邮件接收由 <code>git format-patch</code> 产生的补丁，这些钩子也许用得上。</p>\n<p>第一个运行的钩子是 <code>applypatch-msg</code> 。 它接收单个参数：包含请求合并信息的临时文件的名字。 如果脚本返回非零值，Git 将放弃该补丁。 你可以用该脚本来确保提交信息符合格式，或直接用脚本修正格式错误。</p>\n<p>下一个在 <code>git am</code> 运行期间被调用的是 <code>pre-applypatch</code> 。 有些难以理解的是，它正好运行于应用补丁 <em>之后</em>，产生提交之前，所以你可以用它在提交前检查快照。 你可以用这个脚本运行测试或检查工作区。 如果有什么遗漏，或测试未能通过，脚本会以非零值退出，中断 <code>git am</code> 的运行，这样补丁就不会被提交。</p>\n<p><code>post-applypatch</code> 运行于提交产生之后，是在 <code>git am</code> 运行期间最后被调用的钩子。 你可以用它把结果通知给一个小组或所拉取的补丁的作者。 但你没办法用它停止打补丁的过程。</p>\n</li>\n<li><h4 id=\"其它客户端钩子\"><a href=\"#其它客户端钩子\" class=\"headerlink\" title=\"其它客户端钩子\"></a>其它客户端钩子</h4><p><code>pre-rebase</code> 钩子运行于变基之前，以非零值退出可以中止变基的过程。 你可以使用这个钩子来禁止对已经推送的提交变基。 Git 自带的 <code>pre-rebase</code> 钩子示例就是这么做的，不过它所做的一些假设可能与你的工作流程不匹配。</p>\n<p><code>post-rewrite</code> 钩子被那些会替换提交记录的命令调用，比如 <code>git commit --amend</code> 和 <code>git rebase</code>（不过不包括 <code>git filter-branch</code>）。 它唯一的参数是触发重写的命令名，同时从标准输入中接受一系列重写的提交记录。 这个钩子的用途很大程度上跟 <code>post-checkout</code> 和 <code>post-merge</code> 差不多。</p>\n<p>在 <code>git checkout</code> 成功运行后，<code>post-checkout</code> 钩子会被调用。你可以根据你的项目环境用它调整你的工作目录。 其中包括放入大的二进制文件、自动生成文档或进行其他类似这样的操作。</p>\n<p>在 <code>git merge</code> 成功运行后，<code>post-merge</code> 钩子会被调用。 你可以用它恢复 Git 无法跟踪的工作区数据，比如权限数据。 这个钩子也可以用来验证某些在 Git 控制之外的文件是否存在，这样你就能在工作区改变时，把这些文件复制进来。</p>\n<p><code>pre-push</code> 钩子会在 <code>git push</code> 运行期间， 更新了远程引用但尚未传送对象时被调用。 它接受远程分支的名字和位置作为参数，同时从标准输入中读取一系列待更新的引用。 你可以在推送开始之前，用它验证对引用的更新操作（一个非零的退出码将终止推送过程）。</p>\n<p>Git 的一些日常操作在运行时，偶尔会调用 <code>git gc --auto</code> 进行垃圾回收。 <code>pre-auto-gc</code> 钩子会在垃圾回收开始之前被调用，可以用它来提醒你现在要回收垃圾了，或者依情形判断是否要中断回收。</p>\n</li>\n</ol>\n<h3 id=\"服务端钩子\"><a href=\"#服务端钩子\" class=\"headerlink\" title=\"服务端钩子\"></a>服务端钩子</h3><p>​    除了客户端钩子，作为系统管理员，你还可以使用若干服务器端的钩子对项目强制执行各种类型的策略。这些钩子脚本在推送到服务器之前和之后运行。推送到服务器前运行的钩子可以在任何时候以非零值退出，拒绝推送并给客户端返回错误消息，还可以依你所想设置足够复杂的推送策略。</p>\n<h4 id=\"pre-receive\"><a href=\"#pre-receive\" class=\"headerlink\" title=\"pre-receive\"></a><code>pre-receive</code></h4><p>​    处理来自客户端的推送操作时，最先被调用的脚本是 <code>pre-receive</code>。 它从标准输入获取一系列被推送的引用。如果它以非零值退出，所有的推送内容都不会被接受。 你可以用这个钩子阻止对引用进行非快进（non-fast-forward）的更新，或者对该推送所修改的所有引用和文件进行访问控制。</p>\n<h4 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"update\"></a><code>update</code></h4><p>​    <code>update</code> 脚本和 <code>pre-receive</code> 脚本十分类似，不同之处在于它会为每一个准备更新的分支各运行一次。 假如推送者同时向多个分支推送内容，<code>pre-receive</code> 只运行一次，相比之下 <code>update</code> 则会为每一个被推送的分支各运行一次。 它不会从标准输入读取内容，而是接受三个参数：引用的名字（分支），推送前的引用指向的内容的 SHA-1 值，以及用户准备推送的内容的 SHA-1 值。 如果 update 脚本以非零值退出，只有相应的那一个引用会被拒绝；其余的依然会被更新。</p>\n<h4 id=\"post-receive\"><a href=\"#post-receive\" class=\"headerlink\" title=\"post-receive\"></a><code>post-receive</code></h4><p>​    <code>post-receive</code> 挂钩在整个过程完结以后运行，可以用来更新其他系统服务或者通知用户。 它接受与 <code>pre-receive</code> 相同的标准输入数据。 它的用途包括给某个邮件列表发信，通知持续集成（continous integration）的服务器， 或者更新问题追踪系统（ticket-tracking system） —— 甚至可以通过分析提交信息来决定某个问题（ticket）是否应该被开启，修改或者关闭。 该脚本无法终止推送进程，不过客户端在它结束运行之前将保持连接状态， 所以如果你想做其他操作需谨慎使用它，因为它将耗费你很长的一段时间。</p>\n<p>​    总结：其中比较常见的钩子服务器端的钩子<code>post-receive</code>、<code>pre-receive</code>。下面给出今天的实际使用场景的截图。</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/06/GyKddP.png\" alt=\"\"></p>\n<p>​    其中实现需求post-receive钩子的代码如下：</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/06/GyMMOs.png\" alt=\"\"></p>"},{"layout":"post","title":"短视频记录","date":"2020-04-07T02:35:00.000Z","comments":1,"_content":"\n\n{% dplayer \"url=/video/douyin-1.MP4\"  \"pic=https://s1.ax1x.com/2020/04/07/Gcut4f.png\" \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=tokendemo\" %}","source":"_posts/video.md","raw":"---\nlayout: post\ntitle: \"短视频记录\"\ndate: 2020-04-07 10:35\ncomments: true\ntags: \n\t- video\n\t\n---\n\n\n{% dplayer \"url=/video/douyin-1.MP4\"  \"pic=https://s1.ax1x.com/2020/04/07/Gcut4f.png\" \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=tokendemo\" %}","slug":"video","published":1,"updated":"2020-04-07T02:47:35.492Z","_id":"ck8pawqzm00006ctx96qyaepd","photos":[],"link":"","content":"<div id=\"dplayer0\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer0\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"/video/douyin-1.MP4\",\"pic\":\"https://s1.ax1x.com/2020/04/07/Gcut4f.png\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>","site":{"data":{}},"excerpt":"","more":"<div id=\"dplayer0\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer0\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"/video/douyin-1.MP4\",\"pic\":\"https://s1.ax1x.com/2020/04/07/Gcut4f.png\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck8p7vtmt0000ahtxar5u4ui5","tag_id":"ck8p7vtn40002ahtxhq40gehz","_id":"ck8p7vtn90007ahtxch007yxc"},{"post_id":"ck8p7vtn20001ahtxbkps6go4","tag_id":"ck8p7vtn80006ahtx80xvaj6r","_id":"ck8p7vtnc000cahtx27slddol"},{"post_id":"ck8p7vtn60003ahtx4249a43e","tag_id":"ck8p7vtnb000aahtx7j3v7rpl","_id":"ck8p7vtnf000fahtxgd02gcfl"},{"post_id":"ck8p7vtn60003ahtx4249a43e","tag_id":"ck8p7vtne000dahtx92nq1l9a","_id":"ck8p7vtnf000gahtxaovu0e5r"},{"post_id":"ck8p7vtn70004ahtxbog7bptb","tag_id":"ck8p7vtnf000eahtx5m7c6qvj","_id":"ck8p7vtng000iahtxfouz16kl"},{"post_id":"ck8p7vtn80005ahtx4cb8a1yv","tag_id":"ck8p7vtng000hahtxeovcepf7","_id":"ck8p7vtng000kahtx32va7eyn"},{"post_id":"ck8p7vtn90008ahtxg0uhdebb","tag_id":"ck8p7vtng000jahtxellg89eb","_id":"ck8p7vtnj000nahtx2yzc1we9"},{"post_id":"ck8p7vtn90008ahtxg0uhdebb","tag_id":"ck8p7vtng000hahtxeovcepf7","_id":"ck8p7vtnj000oahtxa54u9rkk"},{"post_id":"ck8p7vtna0009ahtx5192321j","tag_id":"ck8p7vtnf000eahtx5m7c6qvj","_id":"ck8p7vtnk000qahtxbr7i0pxs"},{"post_id":"ck8p7vtnc000bahtxam4t2kb2","tag_id":"ck8p7vtnj000pahtx4619dk5g","_id":"ck8p7vtnk000rahtx6vcohmx1"},{"post_id":"ck8p7vtnm000sahtx3mcjevzq","tag_id":"ck8p7vtnn000tahtx21l78v6r","_id":"ck8p7vtno000uahtxaxv6gj3f"},{"post_id":"ck8pawqzm00006ctx96qyaepd","tag_id":"ck8pawqzv00016ctx52dfcgjh","_id":"ck8pawqzz00026ctx27e6fw8a"}],"Tag":[{"name":"算法","_id":"ck8p7vtn40002ahtxhq40gehz"},{"name":"会议","_id":"ck8p7vtn80006ahtx80xvaj6r"},{"name":"hexo","_id":"ck8p7vtnb000aahtx7j3v7rpl"},{"name":"blog","_id":"ck8p7vtne000dahtx92nq1l9a"},{"name":"java","_id":"ck8p7vtnf000eahtx5m7c6qvj"},{"name":"k8s","_id":"ck8p7vtng000hahtxeovcepf7"},{"name":"ELK","_id":"ck8p7vtng000jahtxellg89eb"},{"name":"game","_id":"ck8p7vtnj000pahtx4619dk5g"},{"name":"git","_id":"ck8p7vtnn000tahtx21l78v6r"},{"name":"video","_id":"ck8pawqzv00016ctx52dfcgjh"},{"name":"music","_id":"ck8pdbwd60001i4txcr3m3dpx"}]}}